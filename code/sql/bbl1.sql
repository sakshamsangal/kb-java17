/*
SQLyog Community v13.1.5  (64 bit)
MySQL - 8.0.20 : Database - BBL_BANK
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`BBL_BANK` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION='N' */;

USE `BBL_BANK`;

/*Table structure for table `TB_BRANCH_EMPLOYEE_MST` */

DROP TABLE IF EXISTS `TB_BRANCH_EMPLOYEE_MST`;

CREATE TABLE `TB_BRANCH_EMPLOYEE_MST` (
  `EMP_STAFFID` varchar(20) DEFAULT NULL,
  `EMP_NAME` varchar(50) DEFAULT NULL,
  `DESIGNATION` varchar(50) DEFAULT NULL,
  `GRADE` varchar(10) DEFAULT NULL,
  `DEPARTMENT` varchar(50) DEFAULT NULL,
  `ROLE` varchar(50) DEFAULT NULL,
  `DATE_OF_JOINING` date DEFAULT NULL,
  `REGION` varchar(50) DEFAULT NULL,
  `CLUSTER` varchar(50) DEFAULT NULL,
  `BRANCH_NAME` varchar(50) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `TB_BRANCH_EMPLOYEE_MST_BKP_04_02_2020` */

DROP TABLE IF EXISTS `TB_BRANCH_EMPLOYEE_MST_BKP_04_02_2020`;

CREATE TABLE `TB_BRANCH_EMPLOYEE_MST_BKP_04_02_2020` (
  `EMP_STAFFID` varchar(20) DEFAULT NULL,
  `EMP_NAME` varchar(50) DEFAULT NULL,
  `DESIGNATION` varchar(50) DEFAULT NULL,
  `GRADE` varchar(10) DEFAULT NULL,
  `DEPARTMENT` varchar(50) DEFAULT NULL,
  `ROLE` varchar(50) DEFAULT NULL,
  `DATE_OF_JOINING` date DEFAULT NULL,
  `REGION` varchar(50) DEFAULT NULL,
  `CLUSTER` varchar(50) DEFAULT NULL,
  `BRANCH_NAME` varchar(50) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `TB_BRANCH_MST` */

DROP TABLE IF EXISTS `TB_BRANCH_MST`;

CREATE TABLE `TB_BRANCH_MST` (
  `BRANCH_ID` varchar(20) DEFAULT NULL,
  `BRANCH_NAME` varchar(200) DEFAULT NULL,
  `DISTRICT_ID` varchar(20) DEFAULT NULL,
  `DISTRICT_NAME` varchar(200) DEFAULT NULL,
  `ZONE_ID` varchar(20) DEFAULT NULL,
  `ZONE_NAME` varchar(200) DEFAULT NULL,
  `STATE_ID` varchar(20) DEFAULT NULL,
  `STATE_NAME` varchar(200) DEFAULT NULL,
  `PIN_CODE` varchar(20) DEFAULT NULL,
  `POLICE_STATION` varchar(200) DEFAULT NULL,
  `POST_OFFICE` varchar(200) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `TB_BRANCH_MST_BKP` */

DROP TABLE IF EXISTS `TB_BRANCH_MST_BKP`;

CREATE TABLE `TB_BRANCH_MST_BKP` (
  `BRANCH_ID` varchar(20) DEFAULT NULL,
  `BRANCH_NAME` varchar(200) DEFAULT NULL,
  `DISTRICT_ID` varchar(20) DEFAULT NULL,
  `DISTRICT_NAME` varchar(200) DEFAULT NULL,
  `ZONE_ID` varchar(20) DEFAULT NULL,
  `ZONE_NAME` varchar(200) DEFAULT NULL,
  `STATE_ID` varchar(20) DEFAULT NULL,
  `STATE_NAME` varchar(200) DEFAULT NULL,
  `PIN_CODE` varchar(20) DEFAULT NULL,
  `POLICE_STATION` varchar(200) DEFAULT NULL,
  `POST_OFFICE` varchar(200) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `TB_BRANCH_MST_BKP_04_02_2020` */

DROP TABLE IF EXISTS `TB_BRANCH_MST_BKP_04_02_2020`;

CREATE TABLE `TB_BRANCH_MST_BKP_04_02_2020` (
  `BRANCH_ID` varchar(20) DEFAULT NULL,
  `BRANCH_NAME` varchar(200) DEFAULT NULL,
  `DISTRICT_ID` varchar(20) DEFAULT NULL,
  `DISTRICT_NAME` varchar(200) DEFAULT NULL,
  `ZONE_ID` varchar(20) DEFAULT NULL,
  `ZONE_NAME` varchar(200) DEFAULT NULL,
  `STATE_ID` varchar(20) DEFAULT NULL,
  `STATE_NAME` varchar(200) DEFAULT NULL,
  `PIN_CODE` varchar(20) DEFAULT NULL,
  `POLICE_STATION` varchar(200) DEFAULT NULL,
  `POST_OFFICE` varchar(200) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `TB_BRANCH_MST_NEW1` */

DROP TABLE IF EXISTS `TB_BRANCH_MST_NEW1`;

CREATE TABLE `TB_BRANCH_MST_NEW1` (
  `BRANCH_ID` varchar(20) DEFAULT NULL,
  `BRANCH_NAME` varchar(200) DEFAULT NULL,
  `DISTRICT_ID` varchar(20) DEFAULT NULL,
  `DISTRICT_NAME` varchar(200) DEFAULT NULL,
  `ZONE_ID` varchar(20) DEFAULT NULL,
  `ZONE_NAME` varchar(200) DEFAULT NULL,
  `STATE_ID` varchar(20) DEFAULT NULL,
  `STATE_NAME` varchar(200) DEFAULT NULL,
  `PIN_CODE` varchar(20) DEFAULT NULL,
  `POLICE_STATION` varchar(200) DEFAULT NULL,
  `POST_OFFICE` varchar(200) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `TB_CHECK_EOD_RESPONSE` */

DROP TABLE IF EXISTS `TB_CHECK_EOD_RESPONSE`;

CREATE TABLE `TB_CHECK_EOD_RESPONSE` (
  `EOD_RESPONSE` int DEFAULT NULL,
  `LAST_UPDATED_TIMESTAMP` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `TB_CHECK_EOD_RESPONSE_HIST` */

DROP TABLE IF EXISTS `TB_CHECK_EOD_RESPONSE_HIST`;

CREATE TABLE `TB_CHECK_EOD_RESPONSE_HIST` (
  `SNO` int NOT NULL AUTO_INCREMENT,
  `EOD_RESPONSE` int DEFAULT NULL,
  `LAST_UPDATED_TIMESTAMP` datetime DEFAULT NULL,
  `HISTORY_TIMESTAMP` datetime DEFAULT NULL,
  PRIMARY KEY (`SNO`)
) ENGINE=InnoDB AUTO_INCREMENT=29 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `TB_CRN_ACCOUNT_DETAILS` */

DROP TABLE IF EXISTS `TB_CRN_ACCOUNT_DETAILS`;

CREATE TABLE `TB_CRN_ACCOUNT_DETAILS` (
  `AOF_ID` varchar(50) DEFAULT NULL,
  `LEAD_ID` varchar(50) DEFAULT NULL,
  `CRN_NO` varchar(50) DEFAULT NULL,
  `ACCOUNT_NO` varchar(50) DEFAULT NULL,
  `STATUS` varchar(10) DEFAULT NULL,
  `CREATED_BY` varchar(50) DEFAULT NULL,
  `CREATED_TIMESTAMP` datetime DEFAULT NULL,
  `MODIFIED_BY` varchar(50) DEFAULT NULL,
  `MODIFIED_TIMESTAMP` datetime DEFAULT NULL,
  `TEXT1` varchar(500) DEFAULT NULL,
  `TEXT2` varchar(500) DEFAULT NULL,
  `TEXT3` varchar(500) DEFAULT NULL,
  `TEXT4` varchar(500) DEFAULT NULL,
  `TEXT5` varchar(500) DEFAULT NULL,
  `REMARKS` varchar(500) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `TB_DB_EXCEPTION_LOG` */

DROP TABLE IF EXISTS `TB_DB_EXCEPTION_LOG`;

CREATE TABLE `TB_DB_EXCEPTION_LOG` (
  `PROCESS_NAME` varchar(50) DEFAULT NULL,
  `OBJECT_NAME` varchar(50) DEFAULT NULL,
  `OBJECT_TYPE` varchar(50) DEFAULT NULL,
  `STACK_TRACE` varchar(2000) DEFAULT NULL,
  `BACKTRACE_LINE` varchar(500) DEFAULT NULL,
  `LOGIN_ID` varchar(20) DEFAULT NULL,
  `REF_DATA_1` varchar(50) DEFAULT NULL,
  `REF_DATA_2` varchar(50) DEFAULT NULL,
  `REF_DATA_3` varchar(50) DEFAULT NULL,
  `REF_DATA_4` varchar(50) DEFAULT NULL,
  `REF_DATA_5` varchar(100) DEFAULT NULL,
  `REF_DATA_6` varchar(50) DEFAULT NULL,
  `REF_DATA_7` varchar(50) DEFAULT NULL,
  `EXCEPTION_CODE` varchar(50) DEFAULT NULL,
  `EXCEPTION_DETAIL` varchar(2000) DEFAULT NULL,
  `EXCEPTION_TIMESTAMP` datetime(6) DEFAULT NULL,
  `IS_PROCESSED_1` char(1) DEFAULT 'N',
  `IS_PROCESSED_2` char(1) DEFAULT 'N',
  `IS_PROCESSED_1_TIMESTAMP` datetime(6) DEFAULT NULL,
  `IS_PROCESSED_2_TIMESTAMP` datetime(6) DEFAULT NULL,
  `DEVELOPER_REMARKS` varchar(500) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `TB_EKYC_PAY_OPTION` */

DROP TABLE IF EXISTS `TB_EKYC_PAY_OPTION`;

CREATE TABLE `TB_EKYC_PAY_OPTION` (
  `PAYMENT_OPTION` varchar(20) DEFAULT NULL,
  `ISACTIVE` varchar(1) DEFAULT NULL,
  `UPDATED_TIMESTAMP` datetime DEFAULT CURRENT_TIMESTAMP,
  `REMARKS` varchar(400) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `TB_EZB_BUSS_OBJECT` */

DROP TABLE IF EXISTS `TB_EZB_BUSS_OBJECT`;

CREATE TABLE `TB_EZB_BUSS_OBJECT` (
  `OBJECT_KEY` varchar(100) DEFAULT NULL,
  `OBJECT_VERSION` double DEFAULT NULL,
  `LEAD_ID` varchar(50) NOT NULL,
  `AOF_ID` varchar(50) NOT NULL,
  `MEMBER_ID` varchar(50) NOT NULL,
  `OBJECT_DATA` longtext,
  `DEVICE_CREATE_TIMESTAMP` datetime(6) DEFAULT NULL,
  `DEVICE_MODIFY_TIMESTAMP` datetime(6) DEFAULT NULL,
  `OBJECT_CREATE_USER` varchar(50) NOT NULL,
  `OBJECT_CREATE_TIMESTAMP` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `OBJECT_MODIFY_USER` varchar(50) DEFAULT NULL,
  `OBJECT_MODIFY_TIMESTAMP` datetime(6) DEFAULT NULL,
  `LEAD_DISPOSITION` varchar(50) DEFAULT NULL,
  `PROCESS_FLAG` varchar(1) DEFAULT NULL,
  `DEVICE_IP_ADDRESS` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`LEAD_ID`,`AOF_ID`,`MEMBER_ID`),
  KEY `IDX_TB_EZB_BUSS_LEAD_ID` (`LEAD_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `TB_EZB_BUSS_OBJ_HIST` */

DROP TABLE IF EXISTS `TB_EZB_BUSS_OBJ_HIST`;

CREATE TABLE `TB_EZB_BUSS_OBJ_HIST` (
  `OBJECT_KEY` varchar(100) DEFAULT NULL,
  `OBJECT_VERSION` double DEFAULT NULL,
  `LEAD_ID` varchar(50) NOT NULL,
  `AOF_ID` varchar(50) NOT NULL,
  `MEMBER_ID` varchar(50) NOT NULL,
  `OBJECT_DATA` longtext,
  `LEAD_DISPOSITION` varchar(50) DEFAULT NULL,
  `PROCESS_FLAG` varchar(1) DEFAULT NULL,
  `DEVICE_CREATE_TIMESTAMP` datetime(6) DEFAULT NULL,
  `DEVICE_MODIFY_TIMESTAMP` datetime(6) DEFAULT NULL,
  `OBJECT_CREATE_USER` varchar(50) NOT NULL,
  `OBJECT_CREATE_TIMESTAMP` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `OBJECT_MODIFY_USER` varchar(50) DEFAULT NULL,
  `OBJECT_MODIFY_TIMESTAMP` datetime(6) DEFAULT NULL,
  `HISTORY_TIMESTAMP` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `DEVICE_IP_ADDRESS` varchar(50) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `TB_EZB_BUSS_REPORT_DATA` */

DROP TABLE IF EXISTS `TB_EZB_BUSS_REPORT_DATA`;

CREATE TABLE `TB_EZB_BUSS_REPORT_DATA` (
  `OBJECT_KEY` varchar(100) DEFAULT NULL,
  `OBJECT_VERSION` double DEFAULT NULL,
  `LEAD_ID` varchar(50) NOT NULL,
  `AOF_ID` varchar(50) NOT NULL,
  `MEMBER_ID` varchar(50) NOT NULL,
  `OBJECT_DATA` longtext,
  `DEVICE_CREATE_TIMESTAMP` datetime(6) DEFAULT NULL,
  `DEVICE_MODIFY_TIMESTAMP` datetime(6) DEFAULT NULL,
  `OBJECT_CREATE_USER` varchar(50) NOT NULL,
  `OBJECT_CREATE_TIMESTAMP` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `OBJECT_MODIFY_USER` varchar(50) DEFAULT NULL,
  `OBJECT_MODIFY_TIMESTAMP` datetime(6) DEFAULT NULL,
  `LEAD_DISPOSITION` varchar(50) DEFAULT NULL,
  `PROCESS_FLAG` varchar(1) DEFAULT NULL,
  `DEVICE_IP_ADDRESS` varchar(50) DEFAULT NULL,
  `REPORT_EXEC_TIME` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `TB_IMAGE_DATA_OBJ` */

DROP TABLE IF EXISTS `TB_IMAGE_DATA_OBJ`;

CREATE TABLE `TB_IMAGE_DATA_OBJ` (
  `Lead_Id` varchar(50) NOT NULL,
  `Customer_Image_Stream` longtext,
  `CUSTOMER_PDF_STREAM` longtext,
  `CREATED_BY` varchar(50) DEFAULT NULL,
  `CREATED_TIMESTAMP` datetime(6) DEFAULT NULL,
  `MODIFIED_BY` varchar(50) DEFAULT NULL,
  `MODIFIED_TIMESTAMP` datetime(6) DEFAULT NULL,
  `TEXT_1` varchar(500) DEFAULT NULL,
  `TEXT_2` varchar(500) DEFAULT NULL,
  `TEXT_3` varchar(500) DEFAULT NULL,
  `TEXT_4` varchar(500) DEFAULT NULL,
  `TEXT_5` varchar(500) DEFAULT NULL,
  PRIMARY KEY (`Lead_Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `TB_MASTER_DATA_OBJS` */

DROP TABLE IF EXISTS `TB_MASTER_DATA_OBJS`;

CREATE TABLE `TB_MASTER_DATA_OBJS` (
  `GROUP_ID` varchar(30) DEFAULT NULL,
  `CHANNEL` varchar(30) DEFAULT NULL,
  `LOCATION` varchar(30) DEFAULT NULL,
  `EMP_ID` varchar(30) DEFAULT NULL,
  `MASTER_TYPE` varchar(50) DEFAULT NULL,
  `DATA_OBJECT` longtext,
  `VERSION` double DEFAULT NULL,
  `ORG_ID` varchar(50) DEFAULT NULL,
  `APP_ID` varchar(50) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `TB_MASTER_DATA_OBJS_HIST` */

DROP TABLE IF EXISTS `TB_MASTER_DATA_OBJS_HIST`;

CREATE TABLE `TB_MASTER_DATA_OBJS_HIST` (
  `GROUP_ID` varchar(30) DEFAULT NULL,
  `CHANNEL` varchar(30) DEFAULT NULL,
  `LOCATION` varchar(30) DEFAULT NULL,
  `EMP_ID` varchar(30) DEFAULT NULL,
  `MASTER_TYPE` varchar(50) DEFAULT NULL,
  `DATA_OBJECT` longtext,
  `VERSION` double DEFAULT NULL,
  `ORG_ID` varchar(50) DEFAULT NULL,
  `APP_ID` varchar(50) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `TB_ONLINE_TRANSACTION_HISTORY` */

DROP TABLE IF EXISTS `TB_ONLINE_TRANSACTION_HISTORY`;

CREATE TABLE `TB_ONLINE_TRANSACTION_HISTORY` (
  `PROCESS_REQUEST_ID` int NOT NULL AUTO_INCREMENT,
  `LEAD_ID` varchar(50) DEFAULT NULL,
  `AOF_ID` varchar(50) DEFAULT NULL,
  `MEMBER_ID` varchar(50) DEFAULT NULL,
  `PROCESS_TYPE` varchar(50) NOT NULL,
  `PROCESS_SUB_TYPE` varchar(50) NOT NULL,
  `LOGIN_ID` varchar(50) DEFAULT NULL,
  `REF_DATA_1` varchar(50) DEFAULT NULL,
  `REF_DATA_2` varchar(50) DEFAULT NULL,
  `REF_DATA_3` varchar(50) DEFAULT NULL,
  `INTERNAL_PROCESS_FLAG_1` varchar(20) DEFAULT 'N',
  `INTERNAL_PROCESS_STATUS_1` varchar(20) DEFAULT NULL,
  `FLAG_1_PROCESSED_TIMESTAMP` datetime(6) DEFAULT NULL,
  `INTERNAL_PROCESS_FLAG_2` varchar(20) DEFAULT 'N',
  `INTERNAL_PROCESS_STATUS_2` varchar(20) DEFAULT NULL,
  `FLAG_2_PROCESSED_TIMESTAMP` datetime(6) DEFAULT NULL,
  `PROCESS_INITIATED_TIMESTAMP` datetime(6) DEFAULT NULL,
  `PROCESS_RESPONSE_TIMESTAMP` datetime(6) DEFAULT NULL,
  `RESPONSE_CODE` varchar(50) DEFAULT NULL,
  `RESPONSE_SUB_CODE` varchar(50) DEFAULT NULL,
  `RESPONSE_MESSAGE` varchar(2000) DEFAULT NULL,
  `REF_OUT_DATA_1` varchar(1000) DEFAULT NULL,
  `REF_OUT_DATA_2` varchar(100) DEFAULT NULL,
  `INITIATE_PW_SESSION_ID` varchar(50) DEFAULT NULL,
  `FINAL_PROCESS_STATUS` varchar(100) DEFAULT NULL,
  `CREATED_BY` varchar(50) DEFAULT NULL,
  `CREATED_TIMESTAMP` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `MODIFIED_BY` varchar(50) DEFAULT NULL,
  `MODIFIED_TIMESTAMP` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `ORG_ID` varchar(50) DEFAULT 'BANDHAN-5K2ZJU5JWE',
  `APP_ID` varchar(50) DEFAULT 'BANDHAN_WEB-YF4UOFS4T3',
  PRIMARY KEY (`PROCESS_REQUEST_ID`),
  KEY `IDX_TB_ONLINE_TRAN_HIST_LEADID` (`LEAD_ID`),
  KEY `IDX_TB_ONLINE_TRAN_HIST_PROC` (`PROCESS_TYPE`,`PROCESS_SUB_TYPE`,`MEMBER_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=24304 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `TB_ONLINE_TRANSACTION_REF_DATA` */

DROP TABLE IF EXISTS `TB_ONLINE_TRANSACTION_REF_DATA`;

CREATE TABLE `TB_ONLINE_TRANSACTION_REF_DATA` (
  `PROCESS_REQUEST_ID` int NOT NULL AUTO_INCREMENT,
  `CLIENT_REQUEST_DATA` longtext,
  `CLIENT_RESPONSE_DATA` longtext,
  `SERVER_REQUEST_DATA` longtext,
  `SERVER_RESPONSE_DATA` longtext,
  `CURRENT_DATETIME` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `LEAD_ID` varchar(50) DEFAULT NULL,
  `PROCESS_TYPE` varchar(50) DEFAULT NULL,
  `PROCESS_SUB_TYPE` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`PROCESS_REQUEST_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=24294 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `TB_PAY_DATA` */

DROP TABLE IF EXISTS `TB_PAY_DATA`;

CREATE TABLE `TB_PAY_DATA` (
  `TRANS_REF_NO` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `ORDER_ID` varchar(50) DEFAULT NULL,
  `TRN_AMT` varchar(30) DEFAULT NULL,
  `STATUS_CODE` varchar(5) DEFAULT NULL,
  `STATUS_DESC` varchar(200) DEFAULT NULL,
  `RRN` varchar(50) DEFAULT NULL,
  `AUTH_CODE` varchar(10) DEFAULT NULL,
  `RESP_CODE` varchar(10) DEFAULT NULL,
  `TRANS_DATE` datetime DEFAULT NULL,
  `TEXT1` varchar(100) DEFAULT NULL,
  `TEXT2` varchar(100) DEFAULT NULL,
  `TEXT3` varchar(100) DEFAULT NULL,
  `TEXT4` varchar(100) DEFAULT NULL,
  `TEXT5` varchar(100) DEFAULT NULL,
  `TEXT6` varchar(100) DEFAULT NULL,
  `TEXT7` varchar(100) DEFAULT NULL,
  `TEXT8` varchar(100) DEFAULT NULL,
  `PROCESS_ITERATION_COUNT` int DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `TB_PINCODE_MST` */

DROP TABLE IF EXISTS `TB_PINCODE_MST`;

CREATE TABLE `TB_PINCODE_MST` (
  `PINCODE` varchar(10) DEFAULT NULL,
  `OFFICE_TYPE` varchar(50) DEFAULT NULL,
  `DELIVERY_STATUS` varchar(20) DEFAULT NULL,
  `DIVISION_NAME` varchar(50) DEFAULT NULL,
  `REGION` varchar(50) DEFAULT NULL,
  `CIRCLE` varchar(50) DEFAULT NULL,
  `TALUK` varchar(50) DEFAULT NULL,
  `DISTRICT` varchar(50) DEFAULT NULL,
  `STATE` varchar(50) DEFAULT NULL,
  `TELEPHONE` varchar(20) DEFAULT NULL,
  `RELATED_SUB_OFFICE` varchar(100) DEFAULT NULL,
  `RELATED_HEAD_OFFICE` varchar(100) DEFAULT NULL,
  `LONGITUDE` varchar(30) DEFAULT NULL,
  `LATITUDE` varchar(30) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `TB_USER_MST_MIS` */

DROP TABLE IF EXISTS `TB_USER_MST_MIS`;

CREATE TABLE `TB_USER_MST_MIS` (
  `USER_ID` varchar(50) NOT NULL,
  `USER_NAME` varchar(200) DEFAULT NULL,
  `USER_TYPE` varchar(1) DEFAULT NULL,
  `ZONE` varchar(200) DEFAULT NULL,
  `USER_PASSWORD` varchar(200) DEFAULT NULL,
  `MOBILE_NO` int DEFAULT NULL,
  `EMAIL_ID` varchar(200) DEFAULT NULL,
  `ROLE` varchar(200) DEFAULT NULL,
  `SYSTEM_ROLE` varchar(200) DEFAULT NULL,
  `SUPERVISOR_ID` varchar(200) DEFAULT NULL,
  `HOME_LOCATION` varchar(200) DEFAULT NULL,
  `PARENT_ENTITY` varchar(200) DEFAULT NULL,
  `HIERARCHY_ID` varchar(200) DEFAULT NULL,
  `EFFECTIVE_DATE` timestamp NULL DEFAULT NULL,
  `INEFFECTIVE_DATE` timestamp NULL DEFAULT NULL,
  `IS_ACTIVE` varchar(1) DEFAULT 'Y',
  `CREATED_BY` varchar(50) DEFAULT NULL,
  `CREATED_TIMESTAMP` timestamp NULL DEFAULT NULL,
  `MODIFIED_BY` varchar(50) DEFAULT NULL,
  `MODIFIED_TIMESTAMP` timestamp NULL DEFAULT NULL,
  `ORG_ID` varchar(20) DEFAULT NULL,
  `APP_ID` varchar(20) DEFAULT NULL,
  `COMPANY_ID` varchar(50) DEFAULT NULL,
  `BRANCH_ID` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `TB_USER_OTHER_INFO_MIS` */

DROP TABLE IF EXISTS `TB_USER_OTHER_INFO_MIS`;

CREATE TABLE `TB_USER_OTHER_INFO_MIS` (
  `USER_ID` varchar(50) NOT NULL,
  `PAN_NUMBER` varchar(10) NOT NULL,
  `DRIVING_LICENCE` varchar(25) NOT NULL,
  `AADHAAR_NUMBER` varchar(12) NOT NULL,
  `CREATED_BY` varchar(50) DEFAULT NULL,
  `CREATED_TIMESTAMP` timestamp NULL DEFAULT NULL,
  `MODIFIED_BY` varchar(50) DEFAULT NULL,
  `MODIFIED_TIMESTAMP` timestamp NULL DEFAULT NULL,
  `USER_TOKEN` text,
  `USER_STREAM_ID` text,
  PRIMARY KEY (`USER_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `TEST1` */

DROP TABLE IF EXISTS `TEST1`;

CREATE TABLE `TEST1` (
  `tearts` longtext
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `TEST3` */

DROP TABLE IF EXISTS `TEST3`;

CREATE TABLE `TEST3` (
  `LOV_ID` int NOT NULL DEFAULT '0',
  `PROPERTY` varchar(50) DEFAULT NULL,
  `VALUE_CODE` varchar(50) DEFAULT NULL,
  `VALUE_DESC` varchar(500) DEFAULT NULL,
  `PARENT_CODE` varchar(100) DEFAULT NULL,
  `TEXT_1` varchar(50) DEFAULT NULL,
  `TEXT_2` varchar(50) DEFAULT NULL,
  `TEXT_3` varchar(50) DEFAULT NULL,
  `TEXT_4` varchar(50) DEFAULT NULL,
  `TEXT_5` varchar(50) DEFAULT NULL,
  `EFFECTIVE_DATE` timestamp NULL DEFAULT NULL,
  `INEFFECTIVE_DATE` timestamp NULL DEFAULT NULL,
  `INTERNAL_FLAG` varchar(10) DEFAULT NULL,
  `CREATED_DATE` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `CREATED_BY` varchar(50) DEFAULT NULL,
  `MODIFIED_DATE` timestamp NULL DEFAULT NULL,
  `MODIFIED_BY` varchar(50) DEFAULT NULL,
  `PARENT_PROPERTY` varchar(50) DEFAULT NULL,
  `VALUE_SEQUENCE` double DEFAULT NULL,
  `LOB_CODE` varchar(50) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `TRL_LOV_MST` */

DROP TABLE IF EXISTS `TRL_LOV_MST`;

CREATE TABLE `TRL_LOV_MST` (
  `LOV_ID` int NOT NULL AUTO_INCREMENT,
  `PROPERTY` varchar(50) DEFAULT NULL,
  `VALUE_CODE` varchar(50) DEFAULT NULL,
  `VALUE_DESC` varchar(500) DEFAULT NULL,
  `PARENT_CODE` varchar(100) DEFAULT NULL,
  `TEXT_1` varchar(50) DEFAULT NULL,
  `TEXT_2` varchar(50) DEFAULT NULL,
  `TEXT_3` varchar(50) DEFAULT NULL,
  `TEXT_4` varchar(50) DEFAULT NULL,
  `TEXT_5` varchar(50) DEFAULT NULL,
  `EFFECTIVE_DATE` timestamp NULL DEFAULT NULL,
  `INEFFECTIVE_DATE` timestamp NULL DEFAULT NULL,
  `INTERNAL_FLAG` varchar(10) DEFAULT NULL,
  `CREATED_DATE` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `CREATED_BY` varchar(50) DEFAULT NULL,
  `MODIFIED_DATE` timestamp NULL DEFAULT NULL,
  `MODIFIED_BY` varchar(50) DEFAULT NULL,
  `PARENT_PROPERTY` varchar(50) DEFAULT NULL,
  `VALUE_SEQUENCE` double DEFAULT NULL,
  `LOB_CODE` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`LOV_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=501 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `TRL_PRC_GRP_DISPOSITION` */

DROP TABLE IF EXISTS `TRL_PRC_GRP_DISPOSITION`;

CREATE TABLE `TRL_PRC_GRP_DISPOSITION` (
  `LEAD_ID` varchar(50) DEFAULT NULL,
  `LEAD_MEMBER_ID` varchar(50) DEFAULT NULL,
  `LMS_AOF_ID` varchar(50) DEFAULT NULL,
  `CRN_NO` varchar(100) DEFAULT NULL,
  `PROCESS_GROUP_NAME` varchar(50) DEFAULT NULL,
  `START_TIMESTAMP` datetime(6) DEFAULT NULL,
  `END_TIMESTAMP` datetime(6) DEFAULT NULL,
  `CURRENT_DISPOSITION` varchar(50) DEFAULT NULL,
  `LAST_UPDATED_TIMESTAMP` datetime(6) DEFAULT NULL,
  `PROCESS_REMARKS` varchar(1000) DEFAULT NULL,
  `PROCESS_ITERATION_COUNT` double DEFAULT NULL,
  `PROCESS_UPDATE_ID` varchar(50) DEFAULT NULL,
  `TEXT_1` varchar(1000) DEFAULT NULL,
  `TEXT_2` varchar(4000) DEFAULT NULL,
  `TEXT_3` varchar(1000) DEFAULT NULL,
  `TEXT_4` varchar(1000) DEFAULT NULL,
  `TEXT_5` varchar(4000) DEFAULT NULL,
  `CREATED_DATE` datetime DEFAULT NULL,
  `CREATED_BY` varchar(50) DEFAULT NULL,
  `MODIFIED_DATE` datetime DEFAULT NULL,
  `MODIFIED_BY` varchar(50) DEFAULT NULL,
  `CONFIG_ID` varchar(20) DEFAULT NULL,
  `LOGIN_ID` varchar(50) DEFAULT NULL,
  `LOB_ID` varchar(50) DEFAULT NULL,
  `WORKFLOW_GROUP_ID` varchar(50) DEFAULT NULL,
  UNIQUE KEY `TRL_PRC_GRP_DISPOSOITION_UK1` (`LMS_AOF_ID`,`LEAD_MEMBER_ID`,`PROCESS_GROUP_NAME`),
  KEY `TRL_PRC_GRP_DISPOSITION_IDX` (`LMS_AOF_ID`,`PROCESS_GROUP_NAME`,`CURRENT_DISPOSITION`),
  KEY `TRL_PRC_GRP_DISPOSITION_IDX2` (`PROCESS_GROUP_NAME`,`CURRENT_DISPOSITION`,`WORKFLOW_GROUP_ID`),
  KEY `TRL_PRC_GRP_DISPOSOITION_UK` (`LMS_AOF_ID`,`PROCESS_GROUP_NAME`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `TRL_PRC_GRP_DISPOSITION_HIST` */

DROP TABLE IF EXISTS `TRL_PRC_GRP_DISPOSITION_HIST`;

CREATE TABLE `TRL_PRC_GRP_DISPOSITION_HIST` (
  `LEAD_ID` varchar(50) DEFAULT NULL,
  `LEAD_MEMBER_ID` varchar(50) DEFAULT NULL,
  `LMS_AOF_ID` varchar(50) DEFAULT NULL,
  `CRN_NO` varchar(100) DEFAULT NULL,
  `PROCESS_GROUP_NAME` varchar(50) DEFAULT NULL,
  `START_TIMESTAMP` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `END_TIMESTAMP` datetime(6) DEFAULT NULL,
  `CURRENT_DISPOSITION` varchar(50) DEFAULT NULL,
  `LAST_UPDATED_TIMESTAMP` datetime(6) DEFAULT NULL,
  `PROCESS_REMARKS` varchar(1000) DEFAULT NULL,
  `PROCESS_ITERATION_COUNT` double DEFAULT NULL,
  `PROCESS_UPDATE_ID` varchar(50) DEFAULT NULL,
  `TEXT_1` varchar(1000) DEFAULT NULL,
  `TEXT_2` varchar(4000) DEFAULT NULL,
  `TEXT_3` varchar(1000) DEFAULT NULL,
  `TEXT_4` varchar(1000) DEFAULT NULL,
  `TEXT_5` varchar(4000) DEFAULT NULL,
  `CREATED_DATE` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `CREATED_BY` varchar(50) DEFAULT NULL,
  `MODIFIED_DATE` datetime DEFAULT NULL,
  `MODIFIED_BY` varchar(50) DEFAULT NULL,
  `CONFIG_ID` varchar(20) DEFAULT NULL,
  `HISTORY_CREATE_TIMESTAMP` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `LOGIN_ID` varchar(50) DEFAULT NULL,
  `LOB_ID` varchar(50) DEFAULT NULL,
  `WORKFLOW_GROUP_ID` varchar(50) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `TRL_PRC_GRP_DISP_CONFIG` */

DROP TABLE IF EXISTS `TRL_PRC_GRP_DISP_CONFIG`;

CREATE TABLE `TRL_PRC_GRP_DISP_CONFIG` (
  `PROCESS_ID` varchar(50) DEFAULT NULL,
  `REF_INPUT_1` varchar(50) DEFAULT '',
  `REF_INPUT_2` varchar(50) DEFAULT '',
  `SYSTEM_ROLE` varchar(50) DEFAULT NULL,
  `PREVIOUS_DISP` varchar(50) DEFAULT NULL,
  `PRC_GRP` varchar(50) DEFAULT NULL,
  `DISPOSITION` varchar(50) DEFAULT NULL,
  `DISP_FUNC` varchar(30) DEFAULT NULL,
  `ISSTART_END` char(1) DEFAULT NULL,
  `CONFIG_ID` varchar(20) NOT NULL,
  `REMARKS` varchar(20) DEFAULT NULL,
  `DISP_LEVEL` varchar(20) DEFAULT 'AOF',
  `WORKFLOW_GROUP_ID` varchar(50) DEFAULT '',
  `INTERNAL_FLAG` char(1) DEFAULT 'Y',
  `SEQUENTIAL_SERVICE` varchar(100) DEFAULT NULL,
  UNIQUE KEY `IDX_TRL_PRC_GRP_DISP_CONFIG_ID` (`CONFIG_ID`),
  KEY `IDX_PRC_GRP_DISP_CONFIG_PROCESS_ID` (`PROCESS_ID`),
  KEY `IDX_PRC_GRP_DISP_CONFIG_WG_ID` (`WORKFLOW_GROUP_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `test` */

DROP TABLE IF EXISTS `test`;

CREATE TABLE `test` (
  `test_1` varchar(20) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `test2` */

DROP TABLE IF EXISTS `test2`;

CREATE TABLE `test2` (
  `col_1` int DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/* Trigger structure for table `TB_EZB_BUSS_OBJECT` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `TB_EZB_BUSS_OBJECT_TRIG` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'daoapp'@'%' */ /*!50003 TRIGGER `TB_EZB_BUSS_OBJECT_TRIG` BEFORE UPDATE ON `TB_EZB_BUSS_OBJECT` FOR EACH ROW BEGIN
   INSERT INTO TB_EZB_BUSS_OBJ_HIST
          (OBJECT_KEY,
           OBJECT_VERSION,
          LEAD_ID,
          AOF_ID,
          MEMBER_ID,
          OBJECT_DATA,
          LEAD_DISPOSITION,
          PROCESS_FLAG,
          DEVICE_CREATE_TIMESTAMP,
          DEVICE_MODIFY_TIMESTAMP,
          OBJECT_CREATE_USER,
          OBJECT_CREATE_TIMESTAMP,
          OBJECT_MODIFY_USER,
          OBJECT_MODIFY_TIMESTAMP,
          HISTORY_TIMESTAMP)
   VALUES
      (old.OBJECT_KEY,
       old.OBJECT_VERSION,
       old.LEAD_ID,
       old.AOF_ID,
       old.MEMBER_ID,
       old.OBJECT_DATA,
       old.LEAD_DISPOSITION,
       old.PROCESS_FLAG,
       old.DEVICE_CREATE_TIMESTAMP,
       old.DEVICE_MODIFY_TIMESTAMP,
       old.OBJECT_CREATE_USER,
       old.OBJECT_CREATE_TIMESTAMP,
       old.OBJECT_MODIFY_USER,
       old.OBJECT_MODIFY_TIMESTAMP,
       CURRENT_TIMESTAMP());
END */$$


DELIMITER ;

/* Trigger structure for table `TB_MASTER_DATA_OBJS` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `TB_MASTER_DATA_OBJS_AUDIT` */$$

/*!50003 CREATE */ /*!50017 DEFINER = 'daoapp'@'%' */ /*!50003 TRIGGER `TB_MASTER_DATA_OBJS_AUDIT` BEFORE UPDATE ON `TB_MASTER_DATA_OBJS` FOR EACH ROW BEGIN
INSERT INTO TB_MASTER_DATA_OBJS_HIST(GROUP_ID,CHANNEL,LOCATION,EMP_ID,MASTER_TYPE,DATA_OBJECT,VERSION,ORG_ID,APP_ID)
 VALUES(OLD.GROUP_ID,OLD.CHANNEL,OLD.LOCATION,OLD.EMP_ID,OLD.MASTER_TYPE,OLD.DATA_OBJECT,OLD.VERSION,OLD.ORG_ID,OLD.APP_ID); 
END */$$


DELIMITER ;

/*!50106 set global event_scheduler = 1*/;

/* Event structure for event `ET_UPD_REFUND_STATUS` */

/*!50106 DROP EVENT IF EXISTS `ET_UPD_REFUND_STATUS`*/;

DELIMITER $$

/*!50106 CREATE DEFINER=`root`@`localhost` EVENT `ET_UPD_REFUND_STATUS` ON SCHEDULE EVERY 24 HOUR STARTS '2020-09-22 23:40:00' ON COMPLETION NOT PRESERVE ENABLE DO CALL SP_UPD_REFUND_STATUS() */$$
DELIMITER ;

/* Event structure for event `MIS_REPORT_DATA` */

/*!50106 DROP EVENT IF EXISTS `MIS_REPORT_DATA`*/;

DELIMITER $$

/*!50106 CREATE DEFINER=`root`@`localhost` EVENT `MIS_REPORT_DATA` ON SCHEDULE EVERY 24 HOUR STARTS '2020-09-10 23:45:00' ON COMPLETION NOT PRESERVE ENABLE DO CALL SP_INS_REPORT_DATA() */$$
DELIMITER ;

/* Procedure structure for procedure `SP_GET_CONVERT_JULIAN` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_GET_CONVERT_JULIAN` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GET_CONVERT_JULIAN`(IN V_DATE VARCHAR(20))
BEGIN
DECLARE L_DATE DATE;
SELECT DATE_FORMAT(STR_TO_DATE(V_DATE, '%d/%m/%Y'),'%Y/%m/%d') INTO L_DATE;

SELECT (YEAR(L_DATE)-2000)*1000 + DAYOFYEAR(L_DATE);
END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_GET_STATE_CODE` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_GET_STATE_CODE` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GET_STATE_CODE`(IN X_STATE_NAME VARCHAR(100))
BEGIN
 
 SELECT VALUE_CODE FROM TRL_LOV_MST WHERE TRIM(UPPER(VALUE_DESC)) = TRIM(UPPER(X_STATE_NAME)) AND PROPERTY = 'LOV_STATE';

END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_INS_DB_EXCEPTION_LOG` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_INS_DB_EXCEPTION_LOG` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_INS_DB_EXCEPTION_LOG`(
    IN X_PROCESS_NAME      VARCHAR(100),
    IN X_OBJECT_NAME       VARCHAR(100),
    IN X_OBJECT_TYPE       VARCHAR(100),
    IN X_LOGIN_ID          VARCHAR(50),
    IN X_REF_DATA_1       VARCHAR(4000),
    IN X_REF_DATA_2       VARCHAR(4000),
    IN X_REF_DATA_3       VARCHAR(4000),
    IN X_REF_DATA_4       VARCHAR(4000),
    IN X_REF_DATA_5       VARCHAR(4000),
    IN X_REF_DATA_6       VARCHAR(4000),
    IN X_REF_DATA_7       VARCHAR(4000),
    IN X_EXCEPTION_CODE    VARCHAR(50),
    IN X_EXCEPTION_DETAIL  VARCHAR(500),
    IN X_DEVELOPER_REMARKS VARCHAR(500))
BEGIN
/*DECLARE v_sqlcode varchar(20);
DECLARE v_sqlerrm varchar(200);
 
 
 SET v_sqlcode = sqlcode;
 SET v_sqlerrm = substr(sqlerrm, 1,200);  */ -- COMMENTED BY VIPUL
 
 
INSERT
INTO TB_DB_EXCEPTION_LOG
  (
    PROCESS_NAME,
    OBJECT_NAME,
    OBJECT_TYPE,
    /*STACK_TRACE,
    BACKTRACE_LINE,*/
    LOGIN_ID,
    REF_DATA_1,
    REF_DATA_2,
    REF_DATA_3,
    REF_DATA_4,
    REF_DATA_5,
    REF_DATA_6,
    REF_DATA_7,
    EXCEPTION_CODE,
    EXCEPTION_DETAIL,
    EXCEPTION_TIMESTAMP,
    DEVELOPER_REMARKS
  )
  VALUES
  (
    X_PROCESS_NAME,
    X_OBJECT_NAME,
    X_OBJECT_TYPE,
    /*DBMS_UTILITY.FORMAT_CALL_STACK,-- X_STACK_TRACE
    DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,*/    -- COMMENTED BY VIPUL 
    X_LOGIN_ID,
    X_REF_DATA_1,
    X_REF_DATA_2,
    X_REF_DATA_3,
    X_REF_DATA_4,
    X_REF_DATA_5,
    X_REF_DATA_6,
    X_REF_DATA_7,
    X_EXCEPTION_CODE,
    X_EXCEPTION_DETAIL,
    CURRENT_TIMESTAMP,
    X_DEVELOPER_REMARKS
  );
   COMMIT;
END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_GET_MST_DATA` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_GET_MST_DATA` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GET_MST_DATA`(IN X_LOGIN_ID  VARCHAR(50),
  IN X_TYPE VARCHAR(50), 
  IN X_VERSION INT)
BEGIN 
DECLARE v_count INT;
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
	    BEGIN
	    GET DIAGNOSTICS CONDITION 1
	    @ERROR_NO = MYSQL_ERRNO, @MSG = MESSAGE_TEXT, @SQL_STATE_CODE=RETURNED_SQLSTATE;
	    CALL SP_INS_DB_EXCEPTION_LOG('SP_GET_MST_DATA','SP_GET_MST_DATA','PROCEDURE',X_LOGIN_ID,NULL,NULL,NULL,NULL,NULL,NULL,NULL,@ERROR_NO, CONCAT(@SQL_STATE_CODE,'-',@MSG),NULL);
	    END;
    SELECT COUNT(*) INTO v_count 
    FROM TB_MASTER_DATA_OBJS
    WHERE MASTER_TYPE = X_TYPE 
    AND group_id='BBLBANK';
    
    IF v_count=0 THEN
       CALL SP_INS_DB_EXCEPTION_LOG('SP_GET_MST_DATA','SP_GET_MST_DATA','PROCEDURE',X_LOGIN_ID,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'1329','No data Found',NULL);
    END IF; 
                
    SELECT DATA_OBJECT, VERSION AS "VERSION" FROM TB_MASTER_DATA_OBJS
    WHERE MASTER_TYPE = X_TYPE AND group_id='BBLBANK';
    
 END */$$
DELIMITER ;

/* Procedure structure for procedure `test_proc` */

/*!50003 DROP PROCEDURE IF EXISTS  `test_proc` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `test_proc`()
BEGIN
declare x_process int;
declare x_stat varchar(50);
call SP_INS_ONLINE_TXN_HIST('748345124325082015578','748345124325082015578','748345124325082015578','vce_1428',
null,
null,
null,
'test',
'test',
current_timestamp(),
null,
'"UTF-8"?>
<PanVerification>
<Pans>
<pan>AAAPA0039K</pan>
</Pans>
</PanVerification>',
'"UTF-8"?>
<PanVerification>
<Pans>
<pan>AAAPA0039K</pan>
</Pans>
</PanVerification>',
'BANDHAN-5K2ZJU5JWE',
'BANDHAN_WEB-YF4UOFS4T3',
x_process,x_stat);

select x_process,x_stat;
end */$$
DELIMITER ;

/* Procedure structure for procedure `SP_GET_IMAGE_DATA` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_GET_IMAGE_DATA` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GET_IMAGE_DATA`()
BEGIN
SELECT CRN.LEAD_ID,CRN.CRN_NO,CRN.ACCOUNT_NO,IMG.CUSTOMER_IMAGE_STREAM,IMG.CUSTOMER_PDF_STREAM FROM TB_IMAGE_DATA_OBJ IMG,TB_CRN_ACCOUNT_DETAILS CRN
WHERE CRN.LEAD_ID=IMG.LEAD_ID;
END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_GET_DIST_STATE` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_GET_DIST_STATE` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GET_DIST_STATE`(in X_PINCODE varchar(10))
BEGIN
DECLARE V_COUNT int;

select count(1) into V_COUNT from TB_PINCODE_MST WHERE PINCODE=X_PINCODE;

IF V_COUNT>0 THEN
SELECT DISTINCT DISTRICT,STATE FROM TB_PINCODE_MST WHERE PINCODE=X_PINCODE;
ELSE
SELECT 'Hello. There seems to be an error in the Pincode you entered. Please enter the correct Pincode.' ERROR_MSG;
end if;

END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_INS_ONLINE_TXN_HIST` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_INS_ONLINE_TXN_HIST` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_INS_ONLINE_TXN_HIST`(  
  IN x_aof_id VARCHAR(30),
  IN x_lead_id VARCHAR(30),
  IN x_member_id VARCHAR(30),
  IN x_login_id VARCHAR(30),
  IN x_ref_data_1 VARCHAR(50),
  IN x_ref_data_2 VARCHAR(50),
  IN x_ref_data_3 VARCHAR(50),
  IN x_process_type VARCHAR(50),
  IN x_process_sub_type VARCHAR(50),
  IN x_process_initiated_timestamp VARCHAR(50),
  IN x_initiated_session_id VARCHAR(50),
  IN x_client_request_data LONGTEXT,
  IN x_server_request_data LONGTEXT,
  IN x_org_id VARCHAR(50),
  IN x_app_id VARCHAR(50),
  OUT v_process_id INT,
  OUT v_status varchar(20)
)
BEGIN
/*DECLARE v_process_id INT;*/
DECLARE v_err VARCHAR(400);
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
	    BEGIN
	    GET DIAGNOSTICS CONDITION 1
	    @ERROR_NO = MYSQL_ERRNO, @MSG = MESSAGE_TEXT, @SQL_STATE_CODE=RETURNED_SQLSTATE;
	    CALL SP_INS_DB_EXCEPTION_LOG('SP_INS_ONLINE_TXN_HIST','SP_INS_ONLINE_TXN_HIST','PROCEDURE',NULL,x_aof_id,NULL,NULL,NULL,NULL,NULL,NULL,@ERROR_NO, CONCAT(@SQL_STATE_CODE,'-',@MSG),NULL);
	    END;

INSERT INTO TB_ONLINE_TRANSACTION_HISTORY(
    AOF_ID, PROCESS_TYPE, PROCESS_SUB_TYPE,REF_DATA_1,REF_DATA_2,REF_DATA_3, PROCESS_INITIATED_TIMESTAMP, INITIATE_PW_SESSION_ID, CREATED_TIMESTAMP, LEAD_ID, MEMBER_ID, LOGIN_ID, CREATED_BY,ORG_ID,APP_ID)
    VALUES (x_aof_id, x_process_type, x_process_sub_type,x_ref_data_1,x_ref_data_2,x_ref_data_3, x_process_initiated_timestamp, x_initiated_session_id, CURRENT_TIMESTAMP(), x_lead_id, x_member_id, x_login_id, 'SP_INS_ONLINE_TXN_HIST',x_org_id,x_app_id);   
  
  INSERT INTO TB_ONLINE_TRANSACTION_REF_DATA(CLIENT_REQUEST_DATA, SERVER_REQUEST_DATA,LEAD_ID,PROCESS_TYPE,PROCESS_SUB_TYPE) 
  VALUES(x_client_request_data, x_server_request_data,x_lead_id,x_process_type, x_process_sub_type);
   
  COMMIT;
	
	SELECT MAX(LAST_INSERT_ID()) /*max(PROCESS_REQUEST_ID)*/,'SUCCESS' STATUS INTO v_process_id,v_status FROM TB_ONLINE_TRANSACTION_HISTORY;
	
  /*SELECT v_process_id AS process_request_id,'SUCCESS' AS STATUS;*/
         
END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_INSERT_IMAGE_DATA` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_INSERT_IMAGE_DATA` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_INSERT_IMAGE_DATA`(IN X_LEAD_ID VARCHAR(50),IN X_IMAGE_STREAM LONGTEXT,IN X_PDF_STREAM LONGTEXT)
BEGIN
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
	    BEGIN
	    GET DIAGNOSTICS CONDITION 1
	    @ERROR_NO = MYSQL_ERRNO, @MSG = MESSAGE_TEXT, @SQL_STATE_CODE=RETURNED_SQLSTATE;
	    CALL SP_INS_DB_EXCEPTION_LOG('SP_INSERT_IMAGE_DATA','SP_INSERT_IMAGE_DATA','PROCEDURE',NULL,X_LEAD_ID,NULL,NULL,NULL,NULL,NULL,NULL,@ERROR_NO, CONCAT(@SQL_STATE_CODE,'-',@MSG),NULL);
	    END;

	INSERT INTO TB_IMAGE_DATA_OBJ(LEAD_ID,CUSTOMER_IMAGE_STREAM,CUSTOMER_PDF_STREAM,CREATED_TIMESTAMP,CREATED_BY) 
			       VALUES(X_LEAD_ID,X_IMAGE_STREAM,X_PDF_STREAM,CURRENT_TIMESTAMP,'SP_INSERT_IMAGE_DATA') 
	ON DUPLICATE KEY UPDATE LEAD_ID=X_LEAD_ID,
				CUSTOMER_IMAGE_STREAM=X_IMAGE_STREAM,
				CUSTOMER_PDF_STREAM=X_PDF_STREAM,
				MODIFIED_BY='SP_INSERT_IMAGE_DATA',
				MODIFIED_TIMESTAMP=CURRENT_TIMESTAMP;
	END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_UPD_ONLINE_TXN_HIST` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_UPD_ONLINE_TXN_HIST` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UPD_ONLINE_TXN_HIST`(
  IN x_process_request_id VARCHAR(30),
  IN x_response_code VARCHAR(50),
  IN x_response_sub_code VARCHAR(50), 
  IN x_response_message VARCHAR(2000), 
  IN x_ref_out_data_1 VARCHAR(1000),
  IN x_ref_out_data_2 VARCHAR(1000),
  IN x_server_response_json LONGTEXT,
  IN x_client_response_json LONGTEXT,
  IN x_final_process_status VARCHAR(100),
  IN x_process_response_timestamp VARCHAR(30)
)
BEGIN 
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
	    BEGIN
	    GET DIAGNOSTICS CONDITION 1
	    @ERROR_NO = MYSQL_ERRNO, @MSG = MESSAGE_TEXT, @SQL_STATE_CODE=RETURNED_SQLSTATE;
	    CALL SP_INS_DB_EXCEPTION_LOG('SP_UPD_ONLINE_TXN_HIST','SP_UPD_ONLINE_TXN_HIST','PROCEDURE',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,@ERROR_NO, CONCAT(@SQL_STATE_CODE,'-',@MSG),NULL);
	    END;

	UPDATE TB_ONLINE_TRANSACTION_REF_DATA 
	 SET SERVER_RESPONSE_DATA = x_server_response_json,
             CLIENT_RESPONSE_DATA = x_client_response_json  
      WHERE process_request_id = x_process_request_id;
	

      UPDATE TB_ONLINE_TRANSACTION_HISTORY SET 
      RESPONSE_CODE = x_response_code,
      RESPONSE_SUB_CODE = x_response_sub_code,
      RESPONSE_MESSAGE = x_response_message,
      REF_OUT_DATA_1 = x_ref_out_data_1,
      REF_OUT_DATA_2 = x_ref_out_data_2,
      FINAL_PROCESS_STATUS = x_final_process_status,
      PROCESS_RESPONSE_TIMESTAMP = x_process_response_timestamp,
      MODIFIED_BY  = 'SP_UPD_ONLINE_TXN_HIST',
      MODIFIED_TIMESTAMP = CURRENT_TIMESTAMP()
      WHERE PROCESS_REQUEST_ID = x_process_request_id;
      
  
  /*SELECT 'SUCCESS' AS STATUS;*/
  
END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_INS_REPORT_DATA` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_INS_REPORT_DATA` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_INS_REPORT_DATA`()
BEGIN
DECLARE C_OBJECT_KEY VARCHAR(100);
DECLARE C_OBJECT_VERSION DOUBLE;
DECLARE C_AOF_ID VARCHAR(50);
DECLARE C_MEMBER_ID VARCHAR(50);
DECLARE C_LEAD_ID VARCHAR(50);
DECLARE C_OBJECT_DATA LONGTEXT;
DECLARE C_DEVICE_CREATE_TIMESTAMP DATETIME;
DECLARE C_DEVICE_MODIFY_TIMESTAMP DATETIME;
DECLARE C_OBJECT_CREATE_USER VARCHAR(50); 
DECLARE C_OBJECT_CREATE_TIMESTAMP TIMESTAMP;
DECLARE C_OBJECT_MODIFY_USER VARCHAR(50);
DECLARE C_OBJECT_MODIFY_TIMESTAMP DATETIME;
DECLARE C_LEAD_DISPOSITION VARCHAR(50);
DECLARE C_PROCESS_FLAG VARCHAR(1);
DECLARE C_DEVICE_IP_ADDRESS VARCHAR(50);
DECLARE NOT_FOUND INT DEFAULT 0;
DECLARE V_COUNT INT;

DECLARE CUR_TB_EZB CURSOR FOR 
SELECT * FROM TB_EZB_BUSS_OBJECT
WHERE STR_TO_DATE(IFNULL(OBJECT_MODIFY_TIMESTAMP,OBJECT_CREATE_TIMESTAMP),'%Y-%m-%d %T') BETWEEN DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 24 HOUR) AND CURRENT_TIMESTAMP();


DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
	    BEGIN
	    GET DIAGNOSTICS CONDITION 1
	    @ERROR_NO = MYSQL_ERRNO, @MSG = MESSAGE_TEXT, @SQL_STATE_CODE=RETURNED_SQLSTATE;
	    CALL SP_INS_DB_EXCEPTION_LOG('SP_INS_REPORT_DATA','SP_INS_REPORT_DATA','PROCEDURE',NULL,x_aof_id,NULL,NULL,NULL,NULL,NULL,NULL,@ERROR_NO, CONCAT(@SQL_STATE_CODE,'-',@MSG),NULL);
	    
	    UPDATE TB_EZB_BUSS_OBJECT
	    SET  PROCESS_FLAG='E'
	    WHERE LEAD_ID=C_AOF_ID;  
	    END;
	    
DECLARE CONTINUE HANDLER FOR NOT FOUND SET NOT_FOUND = 1; 

OPEN CUR_TB_EZB;
     loop_label: LOOP
     FETCH CUR_TB_EZB INTO
           C_OBJECT_KEY,
           C_OBJECT_VERSION,
           C_AOF_ID,
           C_MEMBER_ID,
           C_LEAD_ID,
           C_OBJECT_DATA,
           C_DEVICE_CREATE_TIMESTAMP,
           C_DEVICE_MODIFY_TIMESTAMP,
           C_OBJECT_CREATE_USER,
           C_OBJECT_CREATE_TIMESTAMP,
           C_OBJECT_MODIFY_USER,
           C_OBJECT_MODIFY_TIMESTAMP,
           C_LEAD_DISPOSITION,
           C_PROCESS_FLAG,
           C_DEVICE_IP_ADDRESS;
    
    IF NOT_FOUND = 1 THEN LEAVE loop_label; END IF; 
    
    SELECT COUNT(1) 
      INTO V_COUNT 
    FROM TB_EZB_BUSS_REPORT_DATA
    WHERE LEAD_ID=C_AOF_ID;
    
    IF V_COUNT>0 THEN
    UPDATE TB_EZB_BUSS_REPORT_DATA
    SET    OBJECT_KEY=C_OBJECT_KEY,
	   OBJECT_VERSION=C_OBJECT_VERSION,
	   AOF_ID=C_AOF_ID,
	   MEMBER_ID=C_MEMBER_ID,
	   LEAD_ID=C_LEAD_ID,
	   OBJECT_DATA=C_OBJECT_DATA,
	   DEVICE_CREATE_TIMESTAMP=C_DEVICE_CREATE_TIMESTAMP,
	   DEVICE_MODIFY_TIMESTAMP=C_DEVICE_MODIFY_TIMESTAMP,
	   OBJECT_CREATE_USER=C_OBJECT_CREATE_USER,
	   OBJECT_CREATE_TIMESTAMP=C_OBJECT_CREATE_TIMESTAMP,
	   OBJECT_MODIFY_USER=C_OBJECT_MODIFY_USER,
	   OBJECT_MODIFY_TIMESTAMP=C_OBJECT_MODIFY_TIMESTAMP,
	   LEAD_DISPOSITION=C_LEAD_DISPOSITION,
	   PROCESS_FLAG=C_PROCESS_FLAG,
	   DEVICE_IP_ADDRESS=C_DEVICE_IP_ADDRESS,
	   REPORT_EXEC_TIME=CURRENT_TIMESTAMP();
    ELSE 	   
    INSERT INTO TB_EZB_BUSS_REPORT_DATA
           VALUES( C_OBJECT_KEY,
		   C_OBJECT_VERSION,
		   C_AOF_ID,
		   C_MEMBER_ID,
		   C_LEAD_ID,
		   C_OBJECT_DATA,
		   C_DEVICE_CREATE_TIMESTAMP,
		   C_DEVICE_MODIFY_TIMESTAMP,
		   C_OBJECT_CREATE_USER,
		   C_OBJECT_CREATE_TIMESTAMP,
		   C_OBJECT_MODIFY_USER,
		   C_OBJECT_MODIFY_TIMESTAMP,
		   C_LEAD_DISPOSITION,
		   C_PROCESS_FLAG,
		   C_DEVICE_IP_ADDRESS,
		   CURRENT_TIMESTAMP());     
   END IF;
   
   COMMIT;   
   
   update TB_EZB_BUSS_OBJECT
   set  PROCESS_FLAG='Y'
   WHERE LEAD_ID=C_AOF_ID;  
   
   COMMIT;
   
   END LOOP loop_label;
       
END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_TB_INSERT_AOF_CUST_OBJ` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_TB_INSERT_AOF_CUST_OBJ` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_TB_INSERT_AOF_CUST_OBJ`(
    IN X_OBJECT_KEY VARCHAR(50),
    IN X_OBJECT_VERSION VARCHAR(50),
    IN X_OBJECT_DATA LONGTEXT,
    IN X_DEVICE_CREATE_TIMESTAMP VARCHAR(50),
    IN X_DEVICE_MODIFY_TIMESTAMP VARCHAR(50),
    IN X_PROCESS_NAME VARCHAR(50),
    IN X_PW_SESSION_ID VARCHAR(50),
    IN X_LOGIN_ID VARCHAR(50),
    IN X_ORG_ID VARCHAR(50),
    IN X_APP_ID VARCHAR(50),
    IN X_DEVICE_IP_ADDRESS VARCHAR(50)
)
BEGIN
 DECLARE V_LEAD_ID      VARCHAR(50);
 DECLARE V_AOF_ID       VARCHAR(50);
 DECLARE V_MEMBER_ID    VARCHAR(50);
 DECLARE V_OBJECT_KEY   VARCHAR(50);
 DECLARE V_AOF_DISP     VARCHAR(50);
 DECLARE V_ACC_NO       VARCHAR(50);
 DECLARE V_crn_NO       VARCHAR(50);
 DECLARE V_PFE_SCREEN_ID    INT;
 DECLARE V_FE_SCREEN_ID     INT;
 DECLARE V_FE_SCREEN        INT;
 DECLARE V_PFE_SCREEN       INT;
 DECLARE V_COUNT       INT;
 
 DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
	    BEGIN
	    GET DIAGNOSTICS CONDITION 1
	    @ERROR_NO = MYSQL_ERRNO, @MSG = MESSAGE_TEXT, @SQL_STATE_CODE=RETURNED_SQLSTATE;
	    CALL SP_INS_DB_EXCEPTION_LOG('SP_TB_INSERT_AOF_CUST_OBJ','SP_TB_INSERT_AOF_CUST_OBJ','PROCEDURE',NULL,X_OBJECT_KEY,NULL,NULL,NULL,NULL,NULL,NULL,@ERROR_NO, CONCAT(@SQL_STATE_CODE,'-',@MSG),NULL);
	    END;
  
  SELECT JSON_UNQUOTE(JSON_EXTRACT(X_OBJECT_DATA, '$.mainObjectJSON.AOF.key.aofId')) INTO V_LEAD_ID;
  SELECT JSON_UNQUOTE(JSON_EXTRACT(X_OBJECT_DATA, '$.mainObjectJSON.AOF.key.aofId')) INTO V_AOF_ID;
  SELECT JSON_UNQUOTE(JSON_EXTRACT(X_OBJECT_DATA, '$.mainObjectJSON.AOF.key.aofId')) INTO V_MEMBER_ID;
  SELECT JSON_UNQUOTE(JSON_EXTRACT(X_OBJECT_DATA, '$.mainObjectJSON.AOF.workFlow.value')) INTO V_AOF_DISP;
  SELECT JSON_UNQUOTE(JSON_EXTRACT(X_OBJECT_DATA, '$.mainObjectJSON.AOF.Data.response.coreApi.custCreation.AccountNumber')) INTO V_ACC_NO;
  SELECT JSON_UNQUOTE(JSON_EXTRACT(X_OBJECT_DATA, '$.mainObjectJSON.AOF.Data.response.coreApi.custCreation.CustomerID')) INTO V_crn_NO;

                UPDATE TB_EZB_BUSS_OBJECT 
		  SET  OBJECT_KEY = X_OBJECT_KEY,
                    OBJECT_VERSION = X_OBJECT_VERSION,
                    OBJECT_DATA = X_OBJECT_DATA,
                    OBJECT_MODIFY_USER = X_PROCESS_NAME,
                    PROCESS_FLAG='N',
                    LEAD_DISPOSITION = V_AOF_DISP,
                    OBJECT_MODIFY_TIMESTAMP = CURRENT_TIMESTAMP(),
                    DEVICE_IP_ADDRESS = X_DEVICE_IP_ADDRESS
		WHERE LEAD_ID = V_LEAD_ID;

	SET v_count =  ROW_COUNT();

IF(v_count =  0) THEN
            INSERT INTO TB_EZB_BUSS_OBJECT
                    (
                      OBJECT_KEY,
                      OBJECT_VERSION,
                      LEAD_ID,
                      AOF_ID,
                      MEMBER_ID,
                      OBJECT_DATA,
                      PROCESS_FLAG,
                      LEAD_DISPOSITION,
                      DEVICE_CREATE_TIMESTAMP,
                      DEVICE_MODIFY_TIMESTAMP,
                      OBJECT_CREATE_USER,
                      OBJECT_CREATE_TIMESTAMP,
                      DEVICE_IP_ADDRESS
                    )
                    VALUES
                    (
                      X_OBJECT_KEY ,
                      X_OBJECT_VERSION,
                      V_LEAD_ID,
                      V_AOF_ID,
                      V_MEMBER_ID,
                      X_OBJECT_DATA ,
                      'N',
                      V_AOF_DISP,
                      NULL,
                      NULL,
                      X_PROCESS_NAME,
                      CURRENT_TIMESTAMP(),
                      X_DEVICE_IP_ADDRESS
                    );
     END IF;               
  COMMIT;
  
  IF V_AOF_DISP = 'PENDING' THEN

	CALL SP_JSON_PRC_GRP_DISP(V_LEAD_ID, NULL, NULL, V_LEAD_ID, NULL, V_LEAD_ID, NULL, NULL, 'SPVALIDATIONBBL', 'AAM', 'NA', 'AOF', NULL, NULL, NULL, NULL, NULL);			
  
  ELSEIF V_AOF_DISP = 'SUBMIT' THEN
        /*INSERT INTO TB_CRN_ACCOUNT_DETAILS 
                    VALUES ( V_AOF_ID,
                             V_LEAD_ID,
                             V_crn_NO,
                             V_ACC_NO,
                             'N',
                             X_LOGIN_ID,
                             CURRENT_TIMESTAMP(),
                             NULL,
                             NULL,
                             NULL,
                             NULL,
                             NULL,
                             NULL,
                             NULL,
                            'REMARKS');*/
         CALL SP_UPD_CRN_ACCOUNT_DTL(V_LEAD_ID,V_crn_NO,V_ACC_NO) ;                  
         
         
	-- CALL SP_JSON_PRC_GRP_DISP(V_LEAD_ID, NULL, NULL, V_LEAD_ID, NULL, V_LEAD_ID, NULL, NULL, 'SPVALIDATIONBBL', 'SUBMIT', 'NA', 'AOF', NULL, NULL, NULL, NULL, NULL);			
  
  ELSEIF V_AOF_DISP = 'DROP' THEN 

	CALL SP_JSON_PRC_GRP_DISP(V_LEAD_ID, NULL, NULL, V_LEAD_ID, NULL, V_LEAD_ID, NULL, NULL, 'SPVALIDATIONBBL', 'DROP', 'NA', 'AOF', NULL, NULL, NULL, NULL, NULL);			
  END IF;
  
   		SELECT '' AS response_code, 
                '{PROCEED_LABEL:,STAYBACK_LABEL:,RESPONSE_MESSAGE:Data has been successfully saved..}' response_message,
                'I' response_type;
END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_UPD_CRN_ACCOUNT_DTL` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_UPD_CRN_ACCOUNT_DTL` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UPD_CRN_ACCOUNT_DTL`(IN X_LEAD_ID VARCHAR(50),
                                               IN X_CRN VARCHAR(50),
                                               IN X_ACCOUNT_NO VARCHAR(50))
proc_label: BEGIN
DECLARE V_COUNT INT;

DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
	    BEGIN
	    GET DIAGNOSTICS CONDITION 1
	    @ERROR_NO = MYSQL_ERRNO, @MSG = MESSAGE_TEXT, @SQL_STATE_CODE=RETURNED_SQLSTATE;
	    CALL SP_INS_DB_EXCEPTION_LOG('SP_UPD_CRN_ACCOUNT_DTL','SP_UPD_CRN_ACCOUNT_DTL','PROCEDURE',NULL,X_LEAD_ID,NULL,NULL,NULL,NULL,NULL,NULL,@ERROR_NO, CONCAT(@SQL_STATE_CODE,'-',@MSG),NULL);
	    END;
	    
IF X_ACCOUNT_NO IS NULL OR TRIM(X_ACCOUNT_NO)='' THEN
LEAVE proc_label;
END IF;

SELECT COUNT(*) INTO V_COUNT FROM TB_CRN_ACCOUNT_DETAILS WHERE LEAD_ID=X_LEAD_ID;

IF V_COUNT>0 THEN
UPDATE TB_CRN_ACCOUNT_DETAILS
SET CRN_NO=X_CRN,
    ACCOUNT_NO=X_ACCOUNT_NO,
    MODIFIED_BY='SP_UPD_CRN_ACCOUNT_DTL',
    MODIFIED_TIMESTAMP=CURRENT_TIMESTAMP()
WHERE LEAD_ID=X_LEAD_ID;

ELSE
INSERT INTO TB_CRN_ACCOUNT_DETAILS
           VALUES          ( X_LEAD_ID,
                             X_LEAD_ID,
                             X_CRN,
                             X_ACCOUNT_NO,
                             'N',
                             'SP_UPD_CRN_ACCOUNT_DTL',
                             CURRENT_TIMESTAMP(),
                             NULL,
                             NULL,
                             NULL,
                             NULL,
                             NULL,
                             NULL,
                             NULL,
                             NULL);
        END IF;
      
COMMIT;


UPDATE TB_EZB_BUSS_OBJECT
SET OBJECT_DATA= JSON_REPLACE(OBJECT_DATA,"$.mainObjectJSON.AOF.Data.response.coreApi.custCreation.CustomerID",X_CRN,
                                          "$.mainObjectJSON.AOF.Data.response.coreApi.custCreation.AccountNumber",X_ACCOUNT_NO,
                                          "$.mainObjectJSON.AOF.workFlow.value",'SUBMIT'),
OBJECT_MODIFY_USER='SP_UPD_CRN_ACCOUNT_DTL',
OBJECT_MODIFY_TIMESTAMP=CURRENT_TIMESTAMP(),
LEAD_DISPOSITION='SUBMIT'
WHERE LEAD_ID=X_LEAD_ID;

COMMIT;

CALL SP_JSON_PRC_GRP_DISP(X_LEAD_ID, NULL, NULL, X_LEAD_ID, NULL, X_LEAD_ID, NULL, NULL, 'SPVALIDATIONBBL', 'SUBMIT', 'NA', 'AOF', NULL, NULL, NULL, NULL, NULL);

END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_GET_PAY_STATUS` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_GET_PAY_STATUS` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GET_PAY_STATUS`(X_LEAD_ID VARCHAR(50))
BEGIN
DECLARE V_COUNT INTEGER;
SELECT COUNT(*) INTO V_COUNT FROM TB_PAY_DATA 
			     WHERE TEXT1=X_LEAD_ID 
			     AND STATUS_CODE='S';

IF V_COUNT>0 THEN
SELECT 'SUCCESS';
END IF;

END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_GET_STATEWISE_BRANCH` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_GET_STATEWISE_BRANCH` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GET_STATEWISE_BRANCH`(X_PINCODE_COMM VARCHAR(50),X_PINCODE_PERM VARCHAR(50))
BEGIN
DECLARE V_STATE_ID VARCHAR(20);
DECLARE V_COMM_COUNT VARCHAR(5);
DECLARE V_PERM_COUNT VARCHAR(5);

SELECT COUNT(STATE_ID) INTO V_COMM_COUNT FROM TB_BRANCH_MST WHERE UPPER(STATE_NAME) = UPPER(X_PINCODE_COMM);

SELECT COUNT(STATE_ID) INTO V_PERM_COUNT FROM TB_BRANCH_MST WHERE UPPER(STATE_NAME) = UPPER(X_PINCODE_PERM);

IF V_COMM_COUNT<>0 THEN

SELECT BRANCH_ID BRANCH_CODE, CONCAT(BRANCH_NAME,', ', DISTRICT_NAME)  BRANCH_NAME FROM TB_BRANCH_MST 
WHERE UPPER(STATE_NAME) = UPPER(X_PINCODE_COMM) ;

ELSEIF V_COMM_COUNT=0 AND V_PERM_COUNT<>0 THEN

SELECT BRANCH_ID BRANCH_CODE, CONCAT(BRANCH_NAME,', ', DISTRICT_NAME)  BRANCH_NAME FROM TB_BRANCH_MST 
WHERE UPPER(STATE_NAME) = UPPER(X_PINCODE_PERM) ;

ELSE
SELECT BRANCH_ID BRANCH_CODE, CONCAT(BRANCH_NAME,', ', DISTRICT_NAME)  BRANCH_NAME FROM TB_BRANCH_MST 
WHERE BRANCH_ID='1011'; 
END IF;

END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_UPD_REFUND_STATUS` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_UPD_REFUND_STATUS` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UPD_REFUND_STATUS`()
BEGIN
DECLARE V_TRANS_REF_NO VARCHAR(50);
DECLARE V_LEAD_ID VARCHAR(50);
DECLARE NOT_FOUND INT DEFAULT 0;
DECLARE CUR_TB_PAY_DATA CURSOR 
     FOR SELECT TRANS_REF_NO,
                TEXT1 "LEAD_ID" 
         FROM TB_PAY_DATA PAY
         WHERE STATUS_CODE='S'
         AND TEXT1 NOT IN (SELECT LEAD_ID FROM TB_CRN_ACCOUNT_DETAILS CRN WHERE CRN.LEAD_ID=PAY.TEXT1)
         /*AND TEXT1 NOT IN (SELECT LMS_AOF_ID FROM TRL_PRC_GRP_DISPOSITION TRL WHERE TRL.LMS_AOF_ID=PAY.TEXT1 
									   AND  TRL.PROCESS_GROUP_NAME IN ('CIF_CREATION','CIF_CREATION_ONLINE')
									   AND  TRL.CURRENT_DISPOSITION IN ('SUCCESS')) */
         AND TRANS_DATE BETWEEN DATE_SUB(CURRENT_TIMESTAMP, INTERVAL 24 HOUR) AND CURRENT_TIMESTAMP;

  DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
	    BEGIN
	    GET DIAGNOSTICS CONDITION 1
	    @ERROR_NO = MYSQL_ERRNO, @MSG = MESSAGE_TEXT, @SQL_STATE_CODE=RETURNED_SQLSTATE;
	    CALL SP_INS_DB_EXCEPTION_LOG('SP_UPD_REFUND_STATUS','SP_UPD_REFUND_STATUS','PROCEDURE',NULL,V_LEAD_ID,NULL,NULL,NULL,NULL,NULL,NULL,@ERROR_NO, CONCAT(@SQL_STATE_CODE,'-',@MSG),NULL);
	    END;  

DECLARE CONTINUE HANDLER FOR NOT FOUND SET NOT_FOUND = 1; 


        OPEN CUR_TB_PAY_DATA; 
	LOOP_LABEL: LOOP
	FETCH CUR_TB_PAY_DATA INTO V_TRANS_REF_NO,V_LEAD_ID;

	IF NOT_FOUND = 1 THEN LEAVE LOOP_LABEL; END IF;

	UPDATE TB_PAY_DATA
	SET STATUS_CODE='R',
	    TEXT3 = CONCAT('Refund Initiation:',' ',DATE_FORMAT(NOW(),'%d-%m-%y %T')),
	    PROCESS_ITERATION_COUNT=PROCESS_ITERATION_COUNT+1
	WHERE TRANS_REF_NO=V_TRANS_REF_NO;    

	COMMIT;
	    
	UPDATE TB_EZB_BUSS_OBJECT 
	SET OBJECT_DATA= JSON_REPLACE(OBJECT_DATA,"$.mainObjectJSON.AOF.Data.response.paymentSuccess.value",''),
	    OBJECT_MODIFY_USER='SP_UPD_REFUND_STATUS',
	    OBJECT_MODIFY_TIMESTAMP= CURRENT_TIMESTAMP()   
	WHERE LEAD_ID=V_LEAD_ID;  

	COMMIT;
	END LOOP LOOP_LABEL;
    
END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_INS_PAY_DATA` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_INS_PAY_DATA` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_INS_PAY_DATA`(IN X_TRANS_REF_NO VARCHAR(50),
                            IN X_ORDER_ID VARCHAR(50),
                            IN X_TRN_AMT  VARCHAR(30),
                            IN X_STATUS_CODE VARCHAR(5),
                            IN X_STATUS_DESC VARCHAR(200),
                            IN X_RRN         VARCHAR(50),
                            IN X_AUTH_CODE   VARCHAR(10),
                            IN X_RESP_CODE   VARCHAR(10),
                            IN X_TRANS_DATE  VARCHAR(20),
                            IN X_TEXT1      VARCHAR(100),
                            IN X_TEXT2      VARCHAR(100),
                            IN X_TEXT3      VARCHAR(100),
                            IN X_TEXT4      VARCHAR(100),
                            IN X_TEXT5      VARCHAR(100),
                            IN X_TEXT6      VARCHAR(100),
                            IN X_TEXT7      VARCHAR(100),
                            IN X_TEXT8      VARCHAR(100))
BEGIN
DECLARE V_COUNT INT;
DECLARE V_PROCESS_COUNT INT;
DECLARE V_CNT INT;
DECLARE V_TRANS_STATUS VARCHAR(20);
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
	    BEGIN
	    GET DIAGNOSTICS CONDITION 1
	    @ERROR_NO = MYSQL_ERRNO, @MSG = MESSAGE_TEXT, @SQL_STATE_CODE=RETURNED_SQLSTATE;
	    CALL SP_INS_DB_EXCEPTION_LOG('SP_INS_PAY_DATA','SP_INS_PAY_DATA','PROCEDURE',NULL,X_TEXT1,X_TRANS_REF_NO,NULL,NULL,NULL,NULL,NULL,@ERROR_NO, CONCAT(@SQL_STATE_CODE,'-',@MSG),NULL);
	    END;
      
          
      SELECT COUNT(1) INTO V_COUNT 
                      FROM TB_PAY_DATA
                      WHERE TRANS_REF_NO=X_TRANS_REF_NO
                      AND   TEXT1       =X_TEXT1
                      AND   ORDER_ID    =X_ORDER_ID;
      
      IF V_COUNT>0 THEN
      SELECT MAX(PROCESS_ITERATION_COUNT) INTO V_PROCESS_COUNT FROM TB_PAY_DATA
                                     WHERE TRANS_REF_NO=X_TRANS_REF_NO
                                     AND   TEXT1       =X_TEXT1
                                     AND   ORDER_ID    =X_ORDER_ID;
      ELSE
      SET V_PROCESS_COUNT=0;
      END IF;     
      
      IF V_PROCESS_COUNT<3 THEN
      INSERT INTO TB_PAY_DATA 
                  VALUES (NULLIF(X_TRANS_REF_NO,''),
                          X_ORDER_ID, 
                          X_TRN_AMT,
                          X_STATUS_CODE,
                          X_STATUS_DESC,
                          X_RRN,
                          X_AUTH_CODE,
                          X_RESP_CODE,
                          STR_TO_DATE(CURRENT_TIMESTAMP(),'%Y-%m-%d %H:%i:%s'),
                          X_TEXT1,
                          X_TEXT2,
                          X_TEXT3,
                          X_TEXT4,
                          X_TEXT5,
                          X_TEXT6,
                          X_TEXT7,
                          X_TEXT8,
                          V_PROCESS_COUNT+1);
            COMMIT;                     
         END IF;

      SELECT COUNT(1) INTO V_CNT 
                      FROM TB_PAY_DATA
                      WHERE TEXT1       = X_TEXT1
                      AND TRANS_REF_NO  = X_TRANS_REF_NO;
                      
       SELECT 'FAILED' INTO V_TRANS_STATUS
                      FROM TB_PAY_DATA                
                      WHERE TEXT1       = X_TEXT1
                      AND TRANS_REF_NO  = X_TRANS_REF_NO
                      AND  ORDER_ID     = X_ORDER_ID
                      AND  UPPER(STATUS_DESC) ='NO RESPONSE FROM THE BANK';                
        
        IF  V_CNT = 1 AND X_STATUS_CODE = 'S' THEN
		
		CALL SP_JSON_PRC_GRP_DISP(X_TEXT1, NULL, NULL, X_TEXT1, NULL, X_TEXT1, NULL, NULL, 'SPVALIDATIONBBL', 'VALID', 'NA', 'AOF', NULL, NULL, NULL, NULL, NULL);			
		CALL SP_JSON_PRC_GRP_DISP(X_TEXT1, NULL, NULL, X_TEXT1, NULL, X_TEXT1, NULL, NULL, 'SPVALIDATIONBBL', 'ONLINE', 'NA', 'AOF', NULL, NULL, NULL, NULL, NULL);			

	ELSEIF 	V_CNT = 1 AND X_STATUS_CODE = 'F' AND V_TRANS_STATUS='FAILED' THEN
		CALL SP_JSON_PRC_GRP_DISP(X_TEXT1, NULL, NULL, X_TEXT1, NULL, X_TEXT1, NULL, NULL, 'SPVALIDATIONBBL', 'VALID', 'NA', 'AOF', NULL, NULL, NULL, NULL, NULL);			
        END IF;
         
END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_GET_EKYC_PAY_OPTION` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_GET_EKYC_PAY_OPTION` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GET_EKYC_PAY_OPTION`()
BEGIN
SELECT PAYMENT_OPTION FROM TB_EKYC_PAY_OPTION WHERE ISACTIVE='1';
END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_GET_EMP_BRANCH_MST_DATA` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_GET_EMP_BRANCH_MST_DATA` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GET_EMP_BRANCH_MST_DATA`(IN X_BRANCH_ID VARCHAR(10))
BEGIN
SELECT EMP_STAFFID "EMP_ID",ROLE "ROLE",DESIGNATION,EMP_NAME FROM TB_BRANCH_EMPLOYEE_MST WHERE SUBSTR(BRANCH_NAME,1,4)=X_BRANCH_ID;
END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_JSON_PRC_GRP_DISP` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_JSON_PRC_GRP_DISP` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_JSON_PRC_GRP_DISP`(   IN x_lead_id         VARCHAR(100), -- yes
    IN x_prc_group       VARCHAR(100),
    IN x_new_disposition VARCHAR(100),
    IN x_aof_id          VARCHAR(100),  -- yes
    IN x_crn_no          VARCHAR(100),
    IN x_member_id       VARCHAR(100),  -- yes
    IN x_is_isstart      VARCHAR(100),
    IN x_login_id        VARCHAR(100),
    IN x_processid       VARCHAR(100),  -- SPTBINSERTAOFTABLETXN
    IN x_ref_input_1     VARCHAR(100), -- AOF
    IN x_ref_input_2     VARCHAR(100),
    IN x_disp_level      VARCHAR(100),
    IN x_text_1          VARCHAR(4000), -- USED for only BATCH_REQUEST_ID
    IN x_text_2          VARCHAR(4000),
    IN x_text_3          VARCHAR(4000),  -- USED for HOLDER VALUE on all type of account
    IN x_text_4          VARCHAR(4000),
    IN x_text_5          VARCHAR(4000)
    )
BEGIN
  DECLARE v_process_id   VARCHAR(50);
  DECLARE v_system_role  VARCHAR(50);
  DECLARE v_previos_disp VARCHAR(50);
  DECLARE v_prc_grp      VARCHAR(50);
  DECLARE v_disposition  VARCHAR(50);
  DECLARE v_disp_func    VARCHAR(50);
  DECLARE visstart_end   VARCHAR(50);
  DECLARE v_config_id    VARCHAR(50);
  DECLARE v_level        VARCHAR(50);
  DECLARE v_seq_service  VARCHAR(50);
  DECLARE v_remarks      VARCHAR(200);
  DECLARE v_aof_id       VARCHAR(20);
  DECLARE v_member_id    VARCHAR(20);
  DECLARE v_crn_no       VARCHAR(20);
  DECLARE v_workflow_group_id VARCHAR(100);
  DECLARE v_err VARCHAR(2000);
  DECLARE v_iteration_count DOUBLE DEFAULT 0;
  DECLARE v_last_updated_timestamp VARCHAR(50);
  DECLARE v_iteration_complete VARCHAR(1);
  DECLARE v_final_disp VARCHAR(50);
  DECLARE v_count DOUBLE;
  DECLARE NOT_FOUND INT DEFAULT 0;
  DECLARE V_OUT INT DEFAULT 0;
	    
DECLARE CUR_LEAD_PRC_GRP_DISP CURSOR
    FOR
      SELECT PROCESS_ID,
        SYSTEM_ROLE,-- Not in use
        PREVIOUS_DISP,-- Not in use
        PRC_GRP,
        DISPOSITION,
        DISP_FUNC,
        ISSTART_END,
        CONFIG_ID,
        REMARKS,
        DISP_LEVEL,
        SEQUENTIAL_SERVICE,
        WORKFLOW_GROUP_ID
      FROM TRL_PRC_GRP_DISP_CONFIG
      WHERE  PROCESS_ID = x_processid AND REF_INPUT_1 IN (TRIM(x_ref_input_1),'NA') AND REF_INPUT_2 IN (TRIM(x_ref_input_2),'NA') 
      AND INTERNAL_FLAG='Y' AND PRC_GRP=IFNULL(TRIM(x_prc_group),PRC_GRP);
  
  DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
	    BEGIN
	    GET DIAGNOSTICS CONDITION 1
	    @ERROR_NO = MYSQL_ERRNO, @MSG = MESSAGE_TEXT, @SQL_STATE_CODE=RETURNED_SQLSTATE;
	    CALL SP_INS_DB_EXCEPTION_LOG('SP_JSON_PRC_GRP_DISP','SP_JSON_PRC_GRP_DISP','PROCEDURE',NULL,x_lead_id,NULL,NULL,NULL,NULL,NULL,NULL,@ERROR_NO, CONCAT(@SQL_STATE_CODE,'-',@MSG),NULL);
	    END;  

DECLARE CONTINUE HANDLER FOR NOT FOUND SET NOT_FOUND = 1; 

        OPEN CUR_LEAD_PRC_GRP_DISP;
            loop_label: LOOP
                FETCH CUR_LEAD_PRC_GRP_DISP
                INTO v_process_id,
                  v_system_role,
                  v_previos_disp,
                  v_prc_grp,
                  v_disposition,
                  v_disp_func,
                  visstart_end,
                  v_config_id,
                  v_remarks,
                  v_level,
                  v_seq_service,
                  v_workflow_group_id;               
                           
               IF NOT_FOUND = 1 THEN LEAVE loop_label; END IF;
                       
              SELECT COUNT(1) INTO v_count 
              FROM TRL_PRC_GRP_DISPOSITION
              WHERE LMS_AOF_ID       = x_aof_id
              AND PROCESS_GROUP_NAME = v_prc_grp;
              
                
               IF v_count > 0 THEN                 
       
                  INSERT
                      INTO TRL_PRC_GRP_DISPOSITION_HIST
                        (SELECT LEAD_ID,
                            LEAD_MEMBER_ID,
                            LMS_AOF_ID,
                            CRN_NO,
                            PROCESS_GROUP_NAME,
                            START_TIMESTAMP,
                            END_TIMESTAMP,
                            CURRENT_DISPOSITION,
                            LAST_UPDATED_TIMESTAMP,
                            PROCESS_REMARKS,
                            PROCESS_ITERATION_COUNT,
                            PROCESS_UPDATE_ID,
                            TEXT_1,
                            TEXT_2,
                            TEXT_3,
                            TEXT_4,
                            TEXT_5,
                            CREATED_DATE,
                            CREATED_BY,
                            MODIFIED_DATE,
                            MODIFIED_BY,
                            CONFIG_ID,
                            CURRENT_TIMESTAMP,LOGIN_ID,LOB_ID,WORKFLOW_GROUP_ID
                          FROM TRL_PRC_GRP_DISPOSITION
                          WHERE LMS_AOF_ID       = x_aof_id
                          AND PROCESS_GROUP_NAME = v_prc_grp);   
		END IF;
		
		      
                        SELECT 
                             PROCESS_ITERATION_COUNT,
                              CURRENT_TIMESTAMP() ,
                              ''
                          INTO v_iteration_count,
                              v_last_updated_timestamp  ,
                              v_iteration_complete
                          FROM TRL_PRC_GRP_DISPOSITION
                          WHERE LMS_AOF_ID       = x_aof_id
                          AND PROCESS_GROUP_NAME = v_prc_grp;
                          
                          SET NOT_FOUND= 0;
			 
	    IF v_count > 0  THEN			
			
			    UPDATE  TRL_PRC_GRP_DISPOSITION
			    SET     START_TIMESTAMP = ( CASE WHEN visstart_end='S'  THEN CURRENT_TIMESTAMP  END),
				    END_TIMESTAMP  = (  CASE WHEN visstart_end='E' THEN CURRENT_TIMESTAMP END),
				    CURRENT_DISPOSITION  =  v_disposition,
				    LAST_UPDATED_TIMESTAMP  =  v_last_updated_timestamp,
				    PROCESS_ITERATION_COUNT  =  (CASE WHEN visstart_end='S'  THEN v_iteration_count+1 ELSE v_iteration_count END),
				    PROCESS_UPDATE_ID  = x_processid,
				    TEXT_1  =  x_text_1,
				    TEXT_2  = x_text_2,
				    TEXT_4  = x_text_4,
				    TEXT_5  = x_text_5,
				    WORKFLOW_GROUP_ID = v_workflow_group_id,
				    MODIFIED_DATE=SYSDATE()
		             WHERE  LMS_AOF_ID       = x_aof_id
                             AND    PROCESS_GROUP_NAME = v_prc_grp;                     
                             
                            COMMIT; 
			     		
                ELSE
                          INSERT INTO TRL_PRC_GRP_DISPOSITION 
                                        (
                                                    LMS_AOF_ID,
                                                    LEAD_ID,
                                                    PROCESS_GROUP_NAME,
                                                    START_TIMESTAMP,
                                                    END_TIMESTAMP,
                                                    CURRENT_DISPOSITION,
                                                    LAST_UPDATED_TIMESTAMP,
                                                    PROCESS_REMARKS,
                                                    PROCESS_ITERATION_COUNT,
                                                    PROCESS_UPDATE_ID,
                                                    TEXT_1,
                                                    TEXT_2,
                                                    TEXT_3,
                                                    TEXT_4,
                                                    TEXT_5,
                                                    LOGIN_ID,
                                                    LOB_ID,
                                                    CONFIG_ID ,
                                                    WORKFLOW_GROUP_ID,
                                                    CREATED_DATE
                                                  )
                                                  VALUES
                                                  (
                                                    x_aof_id,
                                                    x_lead_id,
                                                    v_prc_grp,
                                                    (
                                                    CASE
                                                      WHEN visstart_end='S' 
                                                      THEN CURRENT_TIMESTAMP
                                                    
                                                    END),
                                                    (
                                                    CASE
                                                      WHEN visstart_end='E' 
                                                      THEN CURRENT_TIMESTAMP
                                                    END),
                                                    v_disposition,
                                                    v_last_updated_timestamp,
                                                    v_seq_service,
                                                    (CASE WHEN visstart_end ='S'  THEN COALESCE(v_iteration_count,0)+1 ELSE COALESCE(v_iteration_count,1) END),
                                                    x_processid,
                                                    x_text_1,
                                                    x_text_2,
                                                    x_text_3,
                                                    x_text_4,
                                                    x_text_5,
                                                    x_login_id,
                                                    NULL,
                                                    v_config_id,
                                                    v_workflow_group_id,
                                                    SYSDATE()
                                                  );
                                                                  
                  COMMIT;
              END IF;
        END LOOP loop_label;
          CLOSE CUR_LEAD_PRC_GRP_DISP;
                    
	END */$$
DELIMITER ;

/* Procedure structure for procedure `TEST_PROC_1` */

/*!50003 DROP PROCEDURE IF EXISTS  `TEST_PROC_1` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `TEST_PROC_1`()
BEGIN
SELECT 'SUCCESS';
END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_MIS_DROP_RPT` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_MIS_DROP_RPT` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_MIS_DROP_RPT`(IN X_START_DATETIME DATEtime,IN X_END_DATETIME DATEtime)
BEGIN
	    	    
SELECT 	JSON_OBJECT("LEAD ID",Lead_ID , 
	"CREATED DATE",IFNULL(OBJECT_MODIFY_TIMESTAMP,OBJECT_CREATE_TIMESTAMP), 
	"MOBILE NUMBER",JSON_UNQUOTE(JSON_EXTRACT(OBJECT_DATA, '$.mainObjectJSON.AOF.key.phoneNumber')), 
	"EMAIL ID",JSON_UNQUOTE(JSON_EXTRACT(OBJECT_DATA, '$.mainObjectJSON.AOF.key.emailId')),
	"PAN DEDUP CAUGHT (Y/N)",JSON_UNQUOTE(JSON_EXTRACT(OBJECT_DATA, '$.mainObjectJSON.AOF.Data.response.dedupe.panDedupe.value')),
        "AADHAAR DEDUP CAUGHT (Y/N)",JSON_UNQUOTE(JSON_EXTRACT(OBJECT_DATA, '$.mainObjectJSON.AOF.Data.response.dedupe.aadhaarDedupe.value')),
        "AML CAUGHT PAN (Y/N)",JSON_UNQUOTE(JSON_EXTRACT(OBJECT_DATA, '$.mainObjectJSON.AOF.Data.response.amlResponse.amlPan.value')),
        "AML CAUGHT Aadhaar (Y/N)",JSON_UNQUOTE(JSON_EXTRACT(OBJECT_DATA, '$.mainObjectJSON.AOF.Data.response.amlResponse.amlAadhaar.value')),
        "Mismatch in Aadhaar and Pan Name (Y/N)",JSON_UNQUOTE(JSON_EXTRACT(OBJECT_DATA, '$.mainObjectJSON.AOF.Data.response.nameMatch.value')),
        "NAME CHECK API SCORE",JSON_UNQUOTE(JSON_EXTRACT(OBJECT_DATA, '$.mainObjectJSON.AOF.Data.response.nameMatch.score')),
        "PAN NAME",CASE WHEN TRIM(JSON_UNQUOTE(JSON_EXTRACT(OBJECT_DATA, '$.mainObjectJSON.AOF.Data.response.panResponse.nameOnCard')))<>''
             THEN JSON_UNQUOTE(JSON_EXTRACT(OBJECT_DATA, '$.mainObjectJSON.AOF.Data.response.panResponse.nameOnCard'))
             ELSE 
               CONCAT(JSON_UNQUOTE(JSON_EXTRACT(OBJECT_DATA, '$.mainObjectJSON.AOF.Data.response.panResponse.firstName')),' ',
               JSON_UNQUOTE(JSON_EXTRACT(OBJECT_DATA, '$.mainObjectJSON.AOF.Data.response.panResponse.middleName')),' ',
               JSON_UNQUOTE(JSON_EXTRACT(OBJECT_DATA, '$.mainObjectJSON.AOF.Data.response.panResponse.lastName')))
        END,
        "AADHAAR NAME",JSON_UNQUOTE(JSON_EXTRACT(OBJECT_DATA, '$.mainObjectJSON.AOF.Data.response.aadhaarResponse.name')))
FROM TB_EZB_BUSS_OBJECT
WHERE LEAD_DISPOSITION = 'DROP'
AND STR_TO_DATE(IFNULL(OBJECT_MODIFY_TIMESTAMP,OBJECT_CREATE_TIMESTAMP),'%Y-%m-%d %T') BETWEEN STR_TO_DATE(X_START_DATETIME,'%Y-%m-%d %T') AND STR_TO_DATE(X_END_DATETIME,'%Y-%m-%d %T');

END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_GET_AOF_SUBMIT_DATA` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_GET_AOF_SUBMIT_DATA` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GET_AOF_SUBMIT_DATA`(IN X_AOF_ID VARCHAR(50))
BEGIN
 DECLARE V_FULL_NAME VARCHAR(50);
 DECLARE V_CRN_NO VARCHAR(50);
 DECLARE V_ACCOUNT_NUMBER VARCHAR(50);
 DECLARE V_BRANCH_VALUE VARCHAR(50);
 DECLARE V_BRANCH_CODE VARCHAR(10);
 DECLARE L_AOF_ID VARCHAR(30);
 
 SELECT LEAD_ID INTO L_AOF_ID FROM TB_EZB_BUSS_OBJECT  
                               WHERE TRIM(SUBSTR(LEAD_ID,1,10)) = TRIM(X_AOF_ID);
  
  SELECT JSON_UNQUOTE(JSON_EXTRACT(OBJECT_DATA, '$.mainObjectJSON.AOF.Data.personalDetails.name.fullName')) AS "FULL_NAME",
         JSON_UNQUOTE(JSON_EXTRACT(OBJECT_DATA, '$.mainObjectJSON.AOF.Data.response.coreApi.custCreation.CustomerID')) AS "CRN_NO",
         JSON_UNQUOTE(JSON_EXTRACT(OBJECT_DATA, '$.mainObjectJSON.AOF.Data.response.coreApi.custCreation.AccountNumber')) AS "ACCOUNT_NUMBER",
         JSON_UNQUOTE(JSON_EXTRACT(OBJECT_DATA, '$.mainObjectJSON.AOF.Data.personalDetails.branch.value')) AS "BRANCH_VALUE",
         JSON_UNQUOTE(JSON_EXTRACT(OBJECT_DATA, '$.mainObjectJSON.AOF.Data.personalDetails.branch.code')) AS "BRANCH_CODE" 
   INTO  V_FULL_NAME,V_CRN_NO,V_ACCOUNT_NUMBER,V_BRANCH_VALUE,V_BRANCH_CODE          
  FROM TB_EZB_BUSS_OBJECT  
 WHERE LEAD_ID=L_AOF_ID
 AND  LEAD_DISPOSITION='SUBMIT';  
 
 SELECT V_FULL_NAME,V_CRN_NO,V_ACCOUNT_NUMBER,V_BRANCH_VALUE,V_BRANCH_CODE;
 
  
END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_UPD_CHECK_EOD_STATUS` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_UPD_CHECK_EOD_STATUS` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UPD_CHECK_EOD_STATUS`(X_EOD_RES INTEGER(1))
BEGIN
DECLARE V_EOD_HIST INTEGER;

SELECT EOD_RESPONSE INTO V_EOD_HIST FROM TB_CHECK_EOD_RESPONSE;
                                    
IF V_EOD_HIST<>X_EOD_RES
THEN 
INSERT INTO TB_CHECK_EOD_RESPONSE_HIST                                   
       (SELECT NULL,EOD_RESPONSE,LAST_UPDATED_TIMESTAMP,CURRENT_TIMESTAMP() FROM TB_CHECK_EOD_RESPONSE);
END IF;       

UPDATE TB_CHECK_EOD_RESPONSE
SET EOD_RESPONSE=X_EOD_RES,
    LAST_UPDATED_TIMESTAMP=CURRENT_TIMESTAMP();
    
COMMIT;
    
END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_GET_AOF_OBJECT_DATA` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_GET_AOF_OBJECT_DATA` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_GET_AOF_OBJECT_DATA`(IN X_AOF_ID VARCHAR(30))
BEGIN

 DECLARE  L_CNT_SUBMIT INTEGER;
 DECLARE  L_CNT_DROP INTEGER;
 DECLARE  L_CNT_PENDING INTEGER;
 DECLARE L_FULL_NAME VARCHAR(200);
 DECLARE L_PAN_DEDUPE VARCHAR(2);
 DECLARE L_AADHAR_DEDUPE VARCHAR(2); 
 DECLARE PAN_AADHAR_DEDUPE VARCHAR(2);
 DECLARE PAN_AADHAR_AML VARCHAR(2);
 DECLARE L_PAN_AML VARCHAR(2);
 DECLARE L_AADHAR_AML VARCHAR(2);
 DECLARE L_NAME_MATCH VARCHAR(2);
 DECLARE L_COUNTRY_FLAG VARCHAR(2);
 DECLARE L_BELOW_EIGHTEEN VARCHAR(2);
 DECLARE L_AOF_ID VARCHAR(30);
 DECLARE L_TWO_WEEK_FLAG VARCHAR(2);
 
 SELECT LEAD_ID INTO L_AOF_ID FROM TB_EZB_BUSS_OBJECT  
                               WHERE TRIM(SUBSTR(LEAD_ID,1,10)) = TRIM(X_AOF_ID);
 
 SELECT IFNULL(CASE WHEN LEAD_DISPOSITION = 'SUBMIT' THEN 1 END,0) "SUBMIT",
 IFNULL(CASE WHEN LEAD_DISPOSITION = 'DROP' THEN 1 END,0) "DROP",
 IFNULL(CASE WHEN LEAD_DISPOSITION = 'PENDING' THEN 1 END,0) "PENDING",
 JSON_UNQUOTE(JSON_EXTRACT(OBJECT_DATA, '$.mainObjectJSON.AOF.Data.personalDetails.name.fullName')) "FULL_NAME",
 JSON_UNQUOTE(JSON_EXTRACT(OBJECT_DATA, '$.mainObjectJSON.AOF.Data.response.dedupe.panDedupe.value')) "PAN_DEDUPE",
 JSON_UNQUOTE(JSON_EXTRACT(OBJECT_DATA, '$.mainObjectJSON.AOF.Data.response.dedupe.aadhaarDedupe.value')) "AADHAR_DEDUPE",
 JSON_UNQUOTE(JSON_EXTRACT(OBJECT_DATA, '$.mainObjectJSON.AOF.Data.response.amlResponse.amlPan.value')) "PAN_AML",
 JSON_UNQUOTE(JSON_EXTRACT(OBJECT_DATA, '$.mainObjectJSON.AOF.Data.response.amlResponse.amlAadhaar.value')) "AADHAR_AML",
 JSON_UNQUOTE(JSON_EXTRACT(OBJECT_DATA, '$.mainObjectJSON.AOF.Data.response.nameMatch.value')) "NAME_MATCH",
 JSON_UNQUOTE(JSON_EXTRACT(OBJECT_DATA, '$.mainObjectJSON.AOF.Data.response.location.countryFlag.value')) "COUNTRY_FLAG",
 JSON_UNQUOTE(JSON_EXTRACT(OBJECT_DATA, '$.mainObjectJSON.AOF.Data.response.lessThenEighteen.value')) "BELOW_EIGHTEEN"
 INTO 
 L_CNT_SUBMIT, 
 L_CNT_DROP, 
 L_CNT_PENDING, 
 L_FULL_NAME,
 L_PAN_DEDUPE,
 L_AADHAR_DEDUPE,
 L_PAN_AML,
 L_AADHAR_AML,
 L_NAME_MATCH,
 L_COUNTRY_FLAG,
 L_BELOW_EIGHTEEN
 FROM TB_EZB_BUSS_OBJECT  
 WHERE LEAD_ID = TRIM(L_AOF_ID);
                   
                                                      
 IF L_CNT_SUBMIT <> 0 THEN
     
  select CASE WHEN OBJECT_MODIFY_TIMESTAMP<=DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 336 HOUR)
              THEN 'N'
              WHEN OBJECT_MODIFY_TIMESTAMP>=DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 336 HOUR)
              THEN 'Y'
         ELSE NULL
         END INTO L_TWO_WEEK_FLAG
         FROM TB_EZB_BUSS_OBJECT WHERE LEAD_ID=TRIM(L_AOF_ID); 
     
  SELECT   NULL OBJECT, 'N' STATUS, L_FULL_NAME MESSAGE,NULL PAN_AADHAR_FLAG,NULL PAN_AADHAR_AML_FLAG,NULL NAME_MATCH,NULL COUNTRY_FLAG,NULL BELOW_EIGHTEEN,L_TWO_WEEK_FLAG TWO_WEEK_FLAG;
	
 ELSEIF L_CNT_DROP <> 0 THEN
   IF L_PAN_DEDUPE='N' AND L_AADHAR_DEDUPE='N'
   THEN 
   SET PAN_AADHAR_DEDUPE='N'; 
   ELSE
   SET PAN_AADHAR_DEDUPE='Y';    
   END IF;
   
   IF L_PAN_AML='N' AND L_AADHAR_AML='N'
   THEN 
   SET PAN_AADHAR_AML='N'; 
   ELSE
   SET PAN_AADHAR_AML='Y';    
   END IF;   
     
  SELECT   NULL OBJECT,
           'N' STATUS,
           L_FULL_NAME MESSAGE,
           PAN_AADHAR_DEDUPE PAN_AADHAR_FLAG,
           PAN_AADHAR_AML PAN_AADHAR_AML_FLAG,
           L_NAME_MATCH NAME_MATCH,
           L_COUNTRY_FLAG COUNTRY_FLAG,
           L_BELOW_EIGHTEEN BELOW_EIGHTEEN,
           NULL TWO_WEEK_FLAG;

 ELSEIF L_CNT_PENDING <> 0 THEN
     
  SELECT  OBJECT_DATA OBJECT, 'Y' STATUS, 
  CONCAT('Hello, ', L_FULL_NAME, '. Welcome back. Your Neo+ Savings account opening has already been initiated from the mobile number you entered. We are redirecting you to the previous page.') MESSAGE,
  NULL PAN_AADHAR_FLAG,
  NULL PAN_AADHAR_AML_FLAG,
  NULL NAME_MATCH,
  NULL COUNTRY_FLAG,
  NULL BELOW_EIGHTEEN,
  NULL TWO_WEEK_FLAG 
  FROM TB_EZB_BUSS_OBJECT WHERE LEAD_ID = TRIM(L_AOF_ID);

 ELSE
  SELECT  NULL OBJECT, 'Y' STATUS, NULL MESSAGE,NULL PAN_AADHAR_FLAG,NULL PAN_AADHAR_AML_FLAG,NULL NAME_MATCH,NULL COUNTRY_FLAG,NULL BELOW_EIGHTEEN,NULL TWO_WEEK_FLAG;
END IF;
 
END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_JSON_PRC_GRP_DISP_EOD` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_JSON_PRC_GRP_DISP_EOD` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_JSON_PRC_GRP_DISP_EOD`(IN X_LEAD_ID VARCHAR(50),IN X_EOD_RES INT(1))
BEGIN
IF X_EOD_RES=1 THEN
CALL SP_JSON_PRC_GRP_DISP(X_LEAD_ID, NULL, NULL, X_LEAD_ID, NULL, X_LEAD_ID, NULL, NULL, 'FRONTEOD_STATUS', 'EODUP', 'NA', 'AOF', NULL, NULL, NULL, NULL, NULL);

SELECT 'SUCCESS';
			
ELSEIF X_EOD_RES=0 THEN
CALL SP_JSON_PRC_GRP_DISP(X_LEAD_ID, NULL, NULL, X_LEAD_ID, NULL, X_LEAD_ID, NULL, NULL, 'FRONTEOD_STATUS', 'EODDOWN', 'NA', 'AOF', NULL, NULL, NULL, NULL, NULL);			

SELECT 'SUCCESS';

ELSE 
SELECT 'INVALID RESPONSE';
END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_JSON_PRC_GRP_DISP_FRONT` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_JSON_PRC_GRP_DISP_FRONT` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_JSON_PRC_GRP_DISP_FRONT`(IN X_LEAD_ID VARCHAR(50))
BEGIN
DECLARE V_CIF_PRC_CNT INTEGER;
DECLARE V_ACC_PRC_CNT INTEGER;

SELECT COUNT(*) INTO V_CIF_PRC_CNT FROM TRL_PRC_GRP_DISPOSITION WHERE LMS_AOF_ID=X_LEAD_ID AND PROCESS_GROUP_NAME='CIF_CREATION';

SELECT COUNT(*) INTO V_ACC_PRC_CNT FROM TRL_PRC_GRP_DISPOSITION WHERE LMS_AOF_ID=X_LEAD_ID AND PROCESS_GROUP_NAME='ACCOUNT_CREATION';

IF V_CIF_PRC_CNT=0 AND V_ACC_PRC_CNT=0 THEN
CALL SP_JSON_PRC_GRP_DISP(X_LEAD_ID, NULL, NULL, X_LEAD_ID, NULL, X_LEAD_ID, NULL, NULL, 'SPVALIDATIONBBL', 'VALID', 'NA', 'AOF', NULL, NULL, NULL, NULL, NULL);

CALL SP_JSON_PRC_GRP_DISP(X_LEAD_ID, 'CIF_CREATION_ONLINE', NULL, X_LEAD_ID, NULL, X_LEAD_ID, NULL, NULL, 'SPVALIDATIONBBL', 'ONLINE', 'NA', 'AOF', NULL, NULL, NULL, NULL, NULL);			

CALL SP_JSON_PRC_GRP_DISP(X_LEAD_ID, 'ACCOUNT_CREATION_ONLINE', NULL, X_LEAD_ID, NULL, X_LEAD_ID, NULL, NULL, 'SPVALIDATIONBBL', 'ONLINE', 'NA', 'AOF', NULL, NULL, NULL, NULL, NULL);			
END IF;

SELECT "SUCCESS";

END */$$
DELIMITER ;

/*Table structure for table `VW_AOFS_FOR_ACCOUNT_CREATION` */

DROP TABLE IF EXISTS `VW_AOFS_FOR_ACCOUNT_CREATION`;

/*!50001 DROP VIEW IF EXISTS `VW_AOFS_FOR_ACCOUNT_CREATION` */;
/*!50001 DROP TABLE IF EXISTS `VW_AOFS_FOR_ACCOUNT_CREATION` */;

/*!50001 CREATE TABLE  `VW_AOFS_FOR_ACCOUNT_CREATION`(
 `LMS_AOF_ID` varchar(50) ,
 `CRN_NO` text ,
 `OBJECT_DATA` longtext 
)*/;

/*Table structure for table `VW_AOFS_FOR_CIF_CREATION` */

DROP TABLE IF EXISTS `VW_AOFS_FOR_CIF_CREATION`;

/*!50001 DROP VIEW IF EXISTS `VW_AOFS_FOR_CIF_CREATION` */;
/*!50001 DROP TABLE IF EXISTS `VW_AOFS_FOR_CIF_CREATION` */;

/*!50001 CREATE TABLE  `VW_AOFS_FOR_CIF_CREATION`(
 `LMS_AOF_ID` varchar(50) ,
 `OBJECT_DATA` longtext 
)*/;

/*Table structure for table `VW_AOF_CUSTOMER_IMAGE_PDF` */

DROP TABLE IF EXISTS `VW_AOF_CUSTOMER_IMAGE_PDF`;

/*!50001 DROP VIEW IF EXISTS `VW_AOF_CUSTOMER_IMAGE_PDF` */;
/*!50001 DROP TABLE IF EXISTS `VW_AOF_CUSTOMER_IMAGE_PDF` */;

/*!50001 CREATE TABLE  `VW_AOF_CUSTOMER_IMAGE_PDF`(
 `LEAD_ID` varchar(50) ,
 `CRN_NO` varchar(50) ,
 `ACCOUNT_NO` varchar(50) ,
 `Customer_Image_Stream` longtext ,
 `CUSTOMER_PDF_STREAM` longtext 
)*/;

/*Table structure for table `VW_AOF_FOR_CUSTOMER_PHOTO` */

DROP TABLE IF EXISTS `VW_AOF_FOR_CUSTOMER_PHOTO`;

/*!50001 DROP VIEW IF EXISTS `VW_AOF_FOR_CUSTOMER_PHOTO` */;
/*!50001 DROP TABLE IF EXISTS `VW_AOF_FOR_CUSTOMER_PHOTO` */;

/*!50001 CREATE TABLE  `VW_AOF_FOR_CUSTOMER_PHOTO`(
 `LEAD_ID` varchar(50) ,
 `CRN_NO` varchar(50) ,
 `ACCOUNT_NO` varchar(50) ,
 `CUSTOMER_IMAGE_STREAM` longtext 
)*/;

/*Table structure for table `VW_AOF_FOR_FUND_TRANSFER` */

DROP TABLE IF EXISTS `VW_AOF_FOR_FUND_TRANSFER`;

/*!50001 DROP VIEW IF EXISTS `VW_AOF_FOR_FUND_TRANSFER` */;
/*!50001 DROP TABLE IF EXISTS `VW_AOF_FOR_FUND_TRANSFER` */;

/*!50001 CREATE TABLE  `VW_AOF_FOR_FUND_TRANSFER`(
 `LEAD_ID` varchar(50) ,
 `CRN_NO` varchar(50) ,
 `ACCOUNT_NO` varchar(50) ,
 `TRANSFER_AMOUNT` varchar(30) ,
 `TRANS_REF_NO` varchar(50) 
)*/;

/*Table structure for table `VW_CKYC_CSV_DATA` */

DROP TABLE IF EXISTS `VW_CKYC_CSV_DATA`;

/*!50001 DROP VIEW IF EXISTS `VW_CKYC_CSV_DATA` */;
/*!50001 DROP TABLE IF EXISTS `VW_CKYC_CSV_DATA` */;

/*!50001 CREATE TABLE  `VW_CKYC_CSV_DATA`(
 `LEAD_ID` varchar(50) ,
 `CIF Number` longtext ,
 `Applicant Name Prefix` longtext ,
 `Applicant First Name` longtext ,
 `Applicant Middle Name` longtext ,
 `Applicant Last Name` longtext ,
 `Father Prefix` longtext ,
 `Father First Name` longtext ,
 `Father Middle Name` longtext ,
 `Father Last Name` longtext ,
 `Mother preFix` longtext ,
 `Mother First Name` longtext ,
 `Mother Middle Name` longtext ,
 `Mother Last Name` longtext ,
 `Gender` longtext ,
 `Date of Birth/ Date of Incorporation` longtext ,
 `PAN` longtext ,
 `Permanent Address Line 1` longtext ,
 `Permanent Address Line 2` longtext ,
 `Permanent Address - City / Town / Village` longtext ,
 `Permanent Address - State/ U.T` longtext ,
 `Permanent PINCODE` longtext ,
 `Permanent Country` longtext ,
 `Current Address Line 1` longtext ,
 `Current Address Line 2` longtext ,
 `Current Address - City / Town / Village` longtext ,
 `Current Address - State/ U.T` longtext ,
 `Current PINCODE` longtext ,
 `Country` longtext ,
 `Permanent and Current Address Match` longtext ,
 `Mobile No.` longtext ,
 `Mobile No. ISD` longtext ,
 `Email ID` longtext ,
 `Date of Declaration` longtext ,
 `Place of Declaration` longtext ,
 `KYC Verification Date` longtext ,
 `KYC Verification Name` longtext ,
 `KYC Verification Designation` longtext ,
 `KYC Verification Branch` longtext ,
 `KYC Verification Emp code` longtext ,
 `Aadhaar Number` longtext ,
 `CUSTOMER_IMAGE_STREAM` longtext ,
 `CUSTOMER_PDF_STREAM` longtext 
)*/;

/*Table structure for table `VW_PAY_TRANS_STATUS` */

DROP TABLE IF EXISTS `VW_PAY_TRANS_STATUS`;

/*!50001 DROP VIEW IF EXISTS `VW_PAY_TRANS_STATUS` */;
/*!50001 DROP TABLE IF EXISTS `VW_PAY_TRANS_STATUS` */;

/*!50001 CREATE TABLE  `VW_PAY_TRANS_STATUS`(
 `TRANS_REF_NO` varchar(50) ,
 `ORDER_ID` varchar(50) ,
 `LEAD_ID` varchar(100) 
)*/;

/*View structure for view VW_AOFS_FOR_ACCOUNT_CREATION */

/*!50001 DROP TABLE IF EXISTS `VW_AOFS_FOR_ACCOUNT_CREATION` */;
/*!50001 DROP VIEW IF EXISTS `VW_AOFS_FOR_ACCOUNT_CREATION` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `VW_AOFS_FOR_ACCOUNT_CREATION` AS select `GD`.`LMS_AOF_ID` AS `LMS_AOF_ID`,(select `B`.`TEXT_1` from `TRL_PRC_GRP_DISPOSITION` `B` where ((`B`.`LMS_AOF_ID` = `GD`.`LMS_AOF_ID`) and (`B`.`PROCESS_GROUP_NAME` in ('CIF_CREATION','CIF_CREATION_ONLINE')) and (`B`.`CURRENT_DISPOSITION` = 'SUCCESS'))) AS `CRN_NO`,(select `TB_EZB_BUSS_OBJECT`.`OBJECT_DATA` from `TB_EZB_BUSS_OBJECT` where (`TB_EZB_BUSS_OBJECT`.`LEAD_ID` = `GD`.`LMS_AOF_ID`)) AS `OBJECT_DATA` from `TRL_PRC_GRP_DISPOSITION` `GD` where ((`GD`.`PROCESS_GROUP_NAME` = 'ACCOUNT_CREATION') and (`GD`.`CURRENT_DISPOSITION` in ('ACCWAIT','FAILURE')) and (`GD`.`WORKFLOW_GROUP_ID` = 'BBL_NTB') and (`GD`.`PROCESS_ITERATION_COUNT` < 7) and exists(select 1 from `TRL_PRC_GRP_DISPOSITION` `GD1` where ((`GD1`.`LMS_AOF_ID` = `GD`.`LMS_AOF_ID`) and (`GD1`.`PROCESS_GROUP_NAME` = 'CIF_CREATION') and (`GD1`.`CURRENT_DISPOSITION` = 'SUCCESS')) union select 1 from (`TRL_PRC_GRP_DISPOSITION` `GD1` join `TB_CHECK_EOD_RESPONSE` `EO`) where ((`GD1`.`LMS_AOF_ID` = `GD`.`LMS_AOF_ID`) and (`GD1`.`PROCESS_GROUP_NAME` = 'CHECK_EOD') and (`GD1`.`CURRENT_DISPOSITION` = 'EOD_UP') and (`EO`.`EOD_RESPONSE` = '0')))) */;

/*View structure for view VW_AOFS_FOR_CIF_CREATION */

/*!50001 DROP TABLE IF EXISTS `VW_AOFS_FOR_CIF_CREATION` */;
/*!50001 DROP VIEW IF EXISTS `VW_AOFS_FOR_CIF_CREATION` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `VW_AOFS_FOR_CIF_CREATION` AS select `GD`.`LMS_AOF_ID` AS `LMS_AOF_ID`,(select `A`.`OBJECT_DATA` from `TB_EZB_BUSS_OBJECT` `A` where (`A`.`LEAD_ID` = `GD`.`LMS_AOF_ID`)) AS `OBJECT_DATA` from `TRL_PRC_GRP_DISPOSITION` `GD` where ((`GD`.`PROCESS_GROUP_NAME` = 'CIF_CREATION') and (`GD`.`CURRENT_DISPOSITION` in ('CIFWAIT','FAILURE')) and (`GD`.`WORKFLOW_GROUP_ID` = 'BBL_NTB') and (`GD`.`PROCESS_ITERATION_COUNT` < 7) and exists(select 1 from `TRL_PRC_GRP_DISPOSITION` `GD1` where ((`GD1`.`LMS_AOF_ID` = `GD`.`LMS_AOF_ID`) and (`GD1`.`PROCESS_GROUP_NAME` = 'PAYMENT_CREATION') and (`GD1`.`CURRENT_DISPOSITION` = 'SUCCESS') and (`GD1`.`PROCESS_UPDATE_ID` = 'BATCHPAYMENT_CREATION')) union select 1 from (`TRL_PRC_GRP_DISPOSITION` `GD1` join `TB_CHECK_EOD_RESPONSE` `EO`) where ((`GD1`.`LMS_AOF_ID` = `GD`.`LMS_AOF_ID`) and (`GD1`.`PROCESS_GROUP_NAME` = 'CHECK_EOD') and (`GD1`.`CURRENT_DISPOSITION` = 'EODUP') and (`EO`.`EOD_RESPONSE` = '0')))) */;

/*View structure for view VW_AOF_CUSTOMER_IMAGE_PDF */

/*!50001 DROP TABLE IF EXISTS `VW_AOF_CUSTOMER_IMAGE_PDF` */;
/*!50001 DROP VIEW IF EXISTS `VW_AOF_CUSTOMER_IMAGE_PDF` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `VW_AOF_CUSTOMER_IMAGE_PDF` AS select `GD`.`LMS_AOF_ID` AS `LEAD_ID`,`B`.`CRN_NO` AS `CRN_NO`,`B`.`ACCOUNT_NO` AS `ACCOUNT_NO`,`A`.`Customer_Image_Stream` AS `Customer_Image_Stream`,`A`.`CUSTOMER_PDF_STREAM` AS `CUSTOMER_PDF_STREAM` from ((`TB_IMAGE_DATA_OBJ` `A` join `TB_CRN_ACCOUNT_DETAILS` `B`) join `TRL_PRC_GRP_DISPOSITION` `GD`) where ((`GD`.`LMS_AOF_ID` = `B`.`LEAD_ID`) and (`A`.`Lead_Id` = `B`.`LEAD_ID`) and (`GD`.`PROCESS_GROUP_NAME` = 'CUSTIMAGEPDF') and (`GD`.`CURRENT_DISPOSITION` in ('CUSTIMAGEPDFWAIT','FAILURE')) and exists(select 1 from `TRL_PRC_GRP_DISPOSITION` `GD1` where ((`GD1`.`LMS_AOF_ID` = `GD`.`LMS_AOF_ID`) and (`GD1`.`PROCESS_GROUP_NAME` = 'ACCOUNT_CREATION') and (`GD1`.`CURRENT_DISPOSITION` = 'SUCCESS')) union select 1 from `TRL_PRC_GRP_DISPOSITION` `GD1` where ((`GD1`.`LMS_AOF_ID` = `GD`.`LMS_AOF_ID`) and (`GD1`.`PROCESS_GROUP_NAME` = 'ACCOUNT_CREATION_ONLINE') and (`GD1`.`CURRENT_DISPOSITION` = 'SUCCESS')))) */;

/*View structure for view VW_AOF_FOR_CUSTOMER_PHOTO */

/*!50001 DROP TABLE IF EXISTS `VW_AOF_FOR_CUSTOMER_PHOTO` */;
/*!50001 DROP VIEW IF EXISTS `VW_AOF_FOR_CUSTOMER_PHOTO` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `VW_AOF_FOR_CUSTOMER_PHOTO` AS select `GD`.`LMS_AOF_ID` AS `LEAD_ID`,`B`.`CRN_NO` AS `CRN_NO`,`B`.`ACCOUNT_NO` AS `ACCOUNT_NO`,`A`.`Customer_Image_Stream` AS `CUSTOMER_IMAGE_STREAM` from ((`TB_IMAGE_DATA_OBJ` `A` join `TB_CRN_ACCOUNT_DETAILS` `B`) join `TRL_PRC_GRP_DISPOSITION` `GD`) where ((`GD`.`LMS_AOF_ID` = `B`.`LEAD_ID`) and (`A`.`Lead_Id` = `B`.`LEAD_ID`) and (`GD`.`PROCESS_GROUP_NAME` = 'CUSTOMER_PHOTO') and (`GD`.`CURRENT_DISPOSITION` in ('CUSTOMERPHOTOWAIT','FAILURE')) and exists(select 1 from `TRL_PRC_GRP_DISPOSITION` `GD1` where ((`GD1`.`LMS_AOF_ID` = `GD`.`LMS_AOF_ID`) and (`GD1`.`PROCESS_GROUP_NAME` = 'ACCOUNT_CREATION') and (`GD1`.`CURRENT_DISPOSITION` = 'SUCCESS')) union select 1 from `TRL_PRC_GRP_DISPOSITION` `GD1` where ((`GD1`.`LMS_AOF_ID` = `GD`.`LMS_AOF_ID`) and (`GD1`.`PROCESS_GROUP_NAME` = 'ACCOUNT_CREATION_ONLINE') and (`GD1`.`CURRENT_DISPOSITION` = 'SUCCESS')))) */;

/*View structure for view VW_AOF_FOR_FUND_TRANSFER */

/*!50001 DROP TABLE IF EXISTS `VW_AOF_FOR_FUND_TRANSFER` */;
/*!50001 DROP VIEW IF EXISTS `VW_AOF_FOR_FUND_TRANSFER` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `VW_AOF_FOR_FUND_TRANSFER` AS select distinct `GD`.`LMS_AOF_ID` AS `LEAD_ID`,`B`.`CRN_NO` AS `CRN_NO`,`B`.`ACCOUNT_NO` AS `ACCOUNT_NO`,`A`.`TRN_AMT` AS `TRANSFER_AMOUNT`,`A`.`TRANS_REF_NO` AS `TRANS_REF_NO` from ((`TRL_PRC_GRP_DISPOSITION` `GD` join `TB_PAY_DATA` `A`) join `TB_CRN_ACCOUNT_DETAILS` `B`) where ((`GD`.`LMS_AOF_ID` = `A`.`TEXT1`) and (`GD`.`LMS_AOF_ID` = `B`.`LEAD_ID`) and (`A`.`STATUS_CODE` = 'S') and (`GD`.`PROCESS_GROUP_NAME` = 'FUND_TRANSFER') and (`GD`.`CREATED_DATE` between concat((curdate() - interval 1 day),' ','23:45:00') and concat(curdate(),' ','23:45:00')) and (`GD`.`CURRENT_DISPOSITION` in ('FUNDTRANSFERWAIT','FAILURE')) and exists(select 1 from `TRL_PRC_GRP_DISPOSITION` `GD1` where ((`GD1`.`LMS_AOF_ID` = `GD`.`LMS_AOF_ID`) and (`GD1`.`PROCESS_GROUP_NAME` = 'ACCOUNT_CREATION') and (`GD1`.`CURRENT_DISPOSITION` = 'SUCCESS')) union select 1 from `TRL_PRC_GRP_DISPOSITION` `GD1` where ((`GD1`.`LMS_AOF_ID` = `GD`.`LMS_AOF_ID`) and (`GD1`.`PROCESS_GROUP_NAME` = 'ACCOUNT_CREATION_ONLINE') and (`GD1`.`CURRENT_DISPOSITION` = 'SUCCESS')))) */;

/*View structure for view VW_CKYC_CSV_DATA */

/*!50001 DROP TABLE IF EXISTS `VW_CKYC_CSV_DATA` */;
/*!50001 DROP VIEW IF EXISTS `VW_CKYC_CSV_DATA` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `VW_CKYC_CSV_DATA` AS select `OBJ`.`LEAD_ID` AS `LEAD_ID`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.response.coreApi.custCreation.CustomerID')) AS `CIF Number`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.gender.preFix')) AS `Applicant Name Prefix`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.name.firstName')) AS `Applicant First Name`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.name.middleName')) AS `Applicant Middle Name`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.name.lastName')) AS `Applicant Last Name`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.fatherName.preFix')) AS `Father Prefix`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.fatherName.firstName')) AS `Father First Name`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.fatherName.middleName')) AS `Father Middle Name`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.fatherName.lastName')) AS `Father Last Name`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.motherName.preFix')) AS `Mother preFix`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.motherName.firstName')) AS `Mother First Name`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.motherName.middleName')) AS `Mother Middle Name`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.motherName.lastName')) AS `Mother Last Name`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.gender.code')) AS `Gender`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.dob')) AS `Date of Birth/ Date of Incorporation`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.panNumber')) AS `PAN`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.address.permanentAddress.addressLine1')) AS `Permanent Address Line 1`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.address.permanentAddress.addressLine2')) AS `Permanent Address Line 2`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.address.permanentAddress.city')) AS `Permanent Address - City / Town / Village`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.address.permanentAddress.state.code')) AS `Permanent Address - State/ U.T`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.address.permanentAddress.pincode')) AS `Permanent PINCODE`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.address.permanentAddress.country')) AS `Permanent Country`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.address.currentAddress.addressLine1')) AS `Current Address Line 1`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.address.currentAddress.addressLine2')) AS `Current Address Line 2`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.address.currentAddress.city')) AS `Current Address - City / Town / Village`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.address.currentAddress.state.code')) AS `Current Address - State/ U.T`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.address.currentAddress.pincode')) AS `Current PINCODE`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.address.currentAddress.country')) AS `Country`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.flagIndicatingProof.value')) AS `Permanent and Current Address Match`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.key.phoneNumber')) AS `Mobile No.`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.key.ISDCode')) AS `Mobile No. ISD`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.key.emailId')) AS `Email ID`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.declarations.declarationsDate')) AS `Date of Declaration`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.declarations.place')) AS `Place of Declaration`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.declarations.KYCVerificationDate')) AS `KYC Verification Date`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.leadGeneratorCode.EMP_NAME')) AS `KYC Verification Name`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.leadGeneratorCode.DESIGNATION')) AS `KYC Verification Designation`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.branch.value')) AS `KYC Verification Branch`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.leadGeneratorCode.EMP_ID')) AS `KYC Verification Emp code`,json_unquote(json_extract(`OBJ`.`OBJECT_DATA`,'$.mainObjectJSON.AOF.Data.personalDetails.aadhaarNumber')) AS `Aadhaar Number`,`IMG`.`Customer_Image_Stream` AS `CUSTOMER_IMAGE_STREAM`,`IMG`.`CUSTOMER_PDF_STREAM` AS `CUSTOMER_PDF_STREAM` from ((`TB_EZB_BUSS_OBJECT` `OBJ` join `TRL_PRC_GRP_DISPOSITION` `TRL` on((`OBJ`.`LEAD_ID` = `TRL`.`LMS_AOF_ID`))) left join `TB_IMAGE_DATA_OBJ` `IMG` on((`OBJ`.`LEAD_ID` = `IMG`.`Lead_Id`))) where ((`OBJ`.`LEAD_DISPOSITION` = 'SUBMIT') and (`TRL`.`PROCESS_GROUP_NAME` = 'CKYCFLG') and (`TRL`.`CURRENT_DISPOSITION` in ('CKYCWAIT','FAILURE'))) */;

/*View structure for view VW_PAY_TRANS_STATUS */

/*!50001 DROP TABLE IF EXISTS `VW_PAY_TRANS_STATUS` */;
/*!50001 DROP VIEW IF EXISTS `VW_PAY_TRANS_STATUS` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `VW_PAY_TRANS_STATUS` AS select `PAY`.`TRANS_REF_NO` AS `TRANS_REF_NO`,`PAY`.`ORDER_ID` AS `ORDER_ID`,`PAY`.`TEXT1` AS `LEAD_ID` from (`TB_PAY_DATA` `PAY` join `TRL_PRC_GRP_DISPOSITION` `DISP`) where ((`PAY`.`STATUS_CODE` = 'F') and (`DISP`.`PROCESS_GROUP_NAME` = 'PAYMENT_CREATION') and (`DISP`.`CURRENT_DISPOSITION` = 'PAYMENTWAIT') and (now() >= (`PAY`.`TRANS_DATE` + interval 20 minute)) and (now() < (`PAY`.`TRANS_DATE` + interval 21 minute)) and (`DISP`.`LMS_AOF_ID` = `PAY`.`TEXT1`) and `PAY`.`TRANS_REF_NO` in (select `TB_PAY_DATA`.`TRANS_REF_NO` from `TB_PAY_DATA` where ((`TB_PAY_DATA`.`STATUS_CODE` = 'S') and (`TB_PAY_DATA`.`TRANS_REF_NO` = `PAY`.`TRANS_REF_NO`))) is false) */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
